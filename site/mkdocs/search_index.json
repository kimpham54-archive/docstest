{
    "docs": [
        {
            "location": "/", 
            "text": "Islandora CLAW\n\n\n8.x-1.0\n\n\nIntroduction\n\n\nIslandora CLAW is the next generation of Islandora. Still in development, this major upgrade will be compatible with \nFedora 4\n.\n\n\nFor more details, please check out the following resources:\n\n\n\n\nWeekly Tech Calls\n\n\n2015\n\n\n2016\n\n\nCLAW Lessons - webinars on how to develop CLAW\n\n\nWeek 01: \nIntro to Fedora 4.x\n\n\nWeek 02: \nHands-on Creating Fedora 4.x Resources\n\n\nWeek 03: \nData Flow in the CLAW\n\n\nWeek 04: \nIntro Drupal side of CLAW and some Camel\n\n\nWeek 05: \nMicroservices 101 (Part 1)\n\n\nWeek 06: \nMicroservices 101 (Part 2)\n\n\nWeek 07: \nDrupal is Dead. Long Live Drupal (Drupal 8)\n\n\nWeek 08: \nData Modeling in Claw, Migration to FCRepo 4, Derivatives\n\n\nWeek 09: \nHow to get involved and contribute!\n\n\n\n\nRepository Structure\n\n\n\n\nAlpaca\n: Event driven middleware based on Apache Camel that synchronizes a Fedora 4 with Drupal.\n\n\nChullo\n: A PHP client for Fedora 4 built using Guzzle and EasyRdf.\n\n\nCrayfish\n: Top level container for the various Islandora CLAW microservices, lovingly known as Crayfish.\n\n\ndocs\n: Documentation!\n\n\ninstall\n: Bleeding edge development environment\n\n\nislandora\n: Islandora CLAW Drupal modules\n\n\nPDX\n: Top level container for the various \nPCDM\n specific Islandora CLAW microservices.\n\n\n\n\nNote: the \nAnsible\n and \nDocker\n repositories are early, experimental provisioning tools for the CLAW stack. For context see \nthis\n. Development is focused on the vagrant / bash environment referenced above, which is the recommended starting point for working with CLAW.\n\n\nSponsors\n\n\n\n\nUPEI\n\n\ndiscoverygarden inc.\n\n\nLYRASIS\n\n\nMcMaster University\n\n\nUniversity of Limerick\n\n\nYork University\n\n\nUniversity of Manitoba\n\n\nSimon Fraser University\n\n\nPALS\n\n\nAmerican Philosophical Society\n\n\nCommon Media Inc.\n\n\n\n\nMaintainers\n\n\n\n\nNick Ruest\n\n\nDaniel Lamb\n\n\nJared Whiklo\n\n\nDiego Pino\n\n\n\n\nDevelopment\n\n\nIf you would like to contribute, please get involved by attending our weekly \nTech Call\n. We love to hear from you!\n\n\nIf you would like to contribute code to the project, you need to be covered by an Islandora Foundation \nContributor License Agreement\n or \nCorporate Contributor Licencse Agreement\n. Please see the \nContributors\n pages on Islandora.ca for more information.", 
            "title": "Home"
        }, 
        {
            "location": "/#islandora-claw", 
            "text": "", 
            "title": "Islandora CLAW"
        }, 
        {
            "location": "/#8x-10", 
            "text": "", 
            "title": "8.x-1.0"
        }, 
        {
            "location": "/#introduction", 
            "text": "Islandora CLAW is the next generation of Islandora. Still in development, this major upgrade will be compatible with  Fedora 4 .  For more details, please check out the following resources:   Weekly Tech Calls  2015  2016  CLAW Lessons - webinars on how to develop CLAW  Week 01:  Intro to Fedora 4.x  Week 02:  Hands-on Creating Fedora 4.x Resources  Week 03:  Data Flow in the CLAW  Week 04:  Intro Drupal side of CLAW and some Camel  Week 05:  Microservices 101 (Part 1)  Week 06:  Microservices 101 (Part 2)  Week 07:  Drupal is Dead. Long Live Drupal (Drupal 8)  Week 08:  Data Modeling in Claw, Migration to FCRepo 4, Derivatives  Week 09:  How to get involved and contribute!", 
            "title": "Introduction"
        }, 
        {
            "location": "/#repository-structure", 
            "text": "Alpaca : Event driven middleware based on Apache Camel that synchronizes a Fedora 4 with Drupal.  Chullo : A PHP client for Fedora 4 built using Guzzle and EasyRdf.  Crayfish : Top level container for the various Islandora CLAW microservices, lovingly known as Crayfish.  docs : Documentation!  install : Bleeding edge development environment  islandora : Islandora CLAW Drupal modules  PDX : Top level container for the various  PCDM  specific Islandora CLAW microservices.   Note: the  Ansible  and  Docker  repositories are early, experimental provisioning tools for the CLAW stack. For context see  this . Development is focused on the vagrant / bash environment referenced above, which is the recommended starting point for working with CLAW.", 
            "title": "Repository Structure"
        }, 
        {
            "location": "/#sponsors", 
            "text": "UPEI  discoverygarden inc.  LYRASIS  McMaster University  University of Limerick  York University  University of Manitoba  Simon Fraser University  PALS  American Philosophical Society  Common Media Inc.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#maintainers", 
            "text": "Nick Ruest  Daniel Lamb  Jared Whiklo  Diego Pino", 
            "title": "Maintainers"
        }, 
        {
            "location": "/#development", 
            "text": "If you would like to contribute, please get involved by attending our weekly  Tech Call . We love to hear from you!  If you would like to contribute code to the project, you need to be covered by an Islandora Foundation  Contributor License Agreement  or  Corporate Contributor Licencse Agreement . Please see the  Contributors  pages on Islandora.ca for more information.", 
            "title": "Development"
        }, 
        {
            "location": "/alpaca/README/", 
            "text": "Alpaca\n\n\n\n\n\n\n\n\n8.x-1.0\n\n\nDescription\n\n\nEvent driven middleware based on \nApache Camel\n that synchronizes a Fedora 4 with a Drupal.\n\n\nBuilding\n\n\nThis project requires Java 8 and can be built with \nGradle\n. To build and test locally, use \n./gradlew build\n.\n\n\nSponsors\n\n\n\n\nKIM! is testing these docs. these changes are being made in alpaca repo not in CLAW repo\n\n\nDiscoverygarden\n\n\nLYRASIS\n\n\nYork University\n\n\nMcMaster University\n\n\nUniversity of Prince Edward Island\n\n\nUniversity of Manitoba\n\n\nUniversity of Limerick\n\n\nSimon Fraser University\n\n\nPALS\n\n\n\n\nMaintainers\n\n\n\n\nNick Ruest\n\n\nDaniel Lamb\n\n\n\n\nDevelopment\n\n\nIf you would like to contribute, please get involved by attending our weekly \nTech Call\n. We love to hear from you!\n\n\nIf you would like to contribute code to the project, you need to be covered by an Islandora Foundation \nContributor License Agreement\n or \nCorporate Contributor Licencse Agreement\n. Please see the \nContributors\n pages on Islandora.ca for more information.\n\n\nLicensing\n\n\nMIT", 
            "title": "README"
        }, 
        {
            "location": "/alpaca/README/#alpaca", 
            "text": "", 
            "title": "Alpaca"
        }, 
        {
            "location": "/alpaca/README/#8x-10", 
            "text": "", 
            "title": "8.x-1.0"
        }, 
        {
            "location": "/alpaca/README/#description", 
            "text": "Event driven middleware based on  Apache Camel  that synchronizes a Fedora 4 with a Drupal.", 
            "title": "Description"
        }, 
        {
            "location": "/alpaca/README/#building", 
            "text": "This project requires Java 8 and can be built with  Gradle . To build and test locally, use  ./gradlew build .", 
            "title": "Building"
        }, 
        {
            "location": "/alpaca/README/#sponsors", 
            "text": "KIM! is testing these docs. these changes are being made in alpaca repo not in CLAW repo  Discoverygarden  LYRASIS  York University  McMaster University  University of Prince Edward Island  University of Manitoba  University of Limerick  Simon Fraser University  PALS", 
            "title": "Sponsors"
        }, 
        {
            "location": "/alpaca/README/#maintainers", 
            "text": "Nick Ruest  Daniel Lamb", 
            "title": "Maintainers"
        }, 
        {
            "location": "/alpaca/README/#development", 
            "text": "If you would like to contribute, please get involved by attending our weekly  Tech Call . We love to hear from you!  If you would like to contribute code to the project, you need to be covered by an Islandora Foundation  Contributor License Agreement  or  Corporate Contributor Licencse Agreement . Please see the  Contributors  pages on Islandora.ca for more information.", 
            "title": "Development"
        }, 
        {
            "location": "/alpaca/README/#licensing", 
            "text": "MIT", 
            "title": "Licensing"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/", 
            "text": "Welcome!\n\n\nIf you are reading this document then you are interested in contributing to the Chullo project. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up!\n\n\nWorkflows\n\n\nFor the time being, the community around this project is centred at the \nIslandora Foundation, Fedora 4 Interest Group\n. The group meets on the fourth Friday of each month at 1PM EST. The meetings usually happen via Skype, and meeting announcements/agendas are posted to the \nIslandora community list\n and the \nIslandora developers list\n. You can view meeting agendas and minutes \nhere\n.\n\n\nThere is an additional 7.x-2.x Tech Call that occurs each Wednesday at 1:00pm Eastern Daylight Time US (UTC-4). Agendas with call-in details can be found \nhere\n.\n\n\nUse cases\n\n\nIf you would like to submit a use case for Chullo, please submit an issue \nhere\n using the \nUse Case template\n, assign the \"use case\" label to the issue.\n\n\nDocumentation\n\n\nYou can contribute documentation in two different ways. One way is to create an issue \nhere\n assign the \"documentation\" label to the issue. Another way is to by pull request, as same as code contribution.\n\n\nRequest a new feature\n\n\nTo request a new feature you should \nopen an issue or use case\n (see \nuse case\n section above), and summarize the desired functionality. Select the label \"enhancement\" if creating an issue on the project repo, and \"use case\" if creating a use case.\n\n\nReport a bug\n\n\nTo report a bug you should \nopen an issue\n that summarizes the bug. Set the label to \"bug\".\n\n\nIn order to help us understand and fix the bug it would be great if you could provide us with:\n\n\n\n\nThe steps to reproduce the bug. This includes information about the version you were using along with the versions of all applicable stack components.\n\n\nThe expected behavior.\n\n\nThe actual, incorrect behavior.\n\n\n\n\nFeel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment.\n\n\nIf you want to provide a pull along with your bug report:\n\n\nThat is great! In this case please send us a pull request as described in section \nCreate a pull request\n below.\n\n\nContribute code\n\n\nBefore you set out to contribute code you will need to have completed a \nContributor License Agreement\n or be covered by a \nCorporate Contributor Licencse Agreement\n. The signed copy of the license agreement should be sent to \n\n\nIf you are interested in contributing code to Islandora but do not know where to begin:\n\n\nIn this case you should \nbrowse open issues and use cases\n.\n\n\nContributions to the Islandora codebase should be sent as GitHub pull requests. See section \nCreate a pull request\n below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub.\n\n\n\n\nFor \nsmall patches\n, feel free to submit pull requests directly for those patches.\n\n\n\n\nFor \nlarger code contributions\n, please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on.\n\n\n\n\nOpen an issue\n and assign it the label of \"enhancement\", if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue.\n\n\nComment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together.\n\n\nIslandora committers will work with you on the design to make sure you are on the right track.\n\n\nImplement your issue, create a pull request (see below), and iterate from there.\n\n\n\n\n\n\n\n\nCreate a pull request\n\n\nTake a look at \nCreating a pull request\n. In a nutshell you need to:\n\n\n\n\nFork\n the Islandora GitHub repository at \nhttps://github.com/Islandora-CLAW/chullo\n to your personal GitHub account.  See \nFork a repo\n for detailed instructions.\n\n\nCommit any changes to your fork.\n\n\nSend a \npull request\n to the Islandora GitHub repository that you forked in step 1.  If your pull request is related to an existing issue -- for instance, because you reported a \nbug/issue\n earlier -- prefix the title of your pull request with the corresponding issue number (e.g. \nissue-123: ...\n). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from. \n\n\n\n\nYou may want to read \nSyncing a fork\n for instructions on how to keep your fork up to date with the latest changes of the upstream (official) \nIslandora-CLAW\n repository.\n\n\nPlease note that TravisCI will test for \nPSR-2\n compliance. You can verify coding standard compliance with \nPHP Codesniffer\n.\n\n\nNote\n: Due to differing interpretations of the PSR-2 coding standards do \nnot\n use PHP \nCoding Standards Fixer\n. Coding Standards Fixer may make changes to your code that can cause it to fail our TravisCI tests.\n\n\nIn addition, Islandora 7.x-2.x Committers will review contributions for \nPSR-4 \n compliance. \n\n\nLicense Agreements\n\n\nThe Islandora Foundation requires that contributors complete a \nContributor License Agreement\n or be covered by a \nCorporate Contributor Licencse Agreement\n. The signed copy of the license agreement should be sent to \ncommunity@islandora.ca\n. This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.", 
            "title": "CONTRIBUTING"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#welcome", 
            "text": "If you are reading this document then you are interested in contributing to the Chullo project. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up!", 
            "title": "Welcome!"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#workflows", 
            "text": "For the time being, the community around this project is centred at the  Islandora Foundation, Fedora 4 Interest Group . The group meets on the fourth Friday of each month at 1PM EST. The meetings usually happen via Skype, and meeting announcements/agendas are posted to the  Islandora community list  and the  Islandora developers list . You can view meeting agendas and minutes  here .  There is an additional 7.x-2.x Tech Call that occurs each Wednesday at 1:00pm Eastern Daylight Time US (UTC-4). Agendas with call-in details can be found  here .", 
            "title": "Workflows"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#use-cases", 
            "text": "If you would like to submit a use case for Chullo, please submit an issue  here  using the  Use Case template , assign the \"use case\" label to the issue.", 
            "title": "Use cases"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#documentation", 
            "text": "You can contribute documentation in two different ways. One way is to create an issue  here  assign the \"documentation\" label to the issue. Another way is to by pull request, as same as code contribution.", 
            "title": "Documentation"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#request-a-new-feature", 
            "text": "To request a new feature you should  open an issue or use case  (see  use case  section above), and summarize the desired functionality. Select the label \"enhancement\" if creating an issue on the project repo, and \"use case\" if creating a use case.", 
            "title": "Request a new feature"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#report-a-bug", 
            "text": "To report a bug you should  open an issue  that summarizes the bug. Set the label to \"bug\".  In order to help us understand and fix the bug it would be great if you could provide us with:   The steps to reproduce the bug. This includes information about the version you were using along with the versions of all applicable stack components.  The expected behavior.  The actual, incorrect behavior.   Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment.  If you want to provide a pull along with your bug report:  That is great! In this case please send us a pull request as described in section  Create a pull request  below.", 
            "title": "Report a bug"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#contribute-code", 
            "text": "Before you set out to contribute code you will need to have completed a  Contributor License Agreement  or be covered by a  Corporate Contributor Licencse Agreement . The signed copy of the license agreement should be sent to   If you are interested in contributing code to Islandora but do not know where to begin:  In this case you should  browse open issues and use cases .  Contributions to the Islandora codebase should be sent as GitHub pull requests. See section  Create a pull request  below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub.   For  small patches , feel free to submit pull requests directly for those patches.   For  larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on.   Open an issue  and assign it the label of \"enhancement\", if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue.  Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together.  Islandora committers will work with you on the design to make sure you are on the right track.  Implement your issue, create a pull request (see below), and iterate from there.", 
            "title": "Contribute code"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#create-a-pull-request", 
            "text": "Take a look at  Creating a pull request . In a nutshell you need to:   Fork  the Islandora GitHub repository at  https://github.com/Islandora-CLAW/chullo  to your personal GitHub account.  See  Fork a repo  for detailed instructions.  Commit any changes to your fork.  Send a  pull request  to the Islandora GitHub repository that you forked in step 1.  If your pull request is related to an existing issue -- for instance, because you reported a  bug/issue  earlier -- prefix the title of your pull request with the corresponding issue number (e.g.  issue-123: ... ). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from.    You may want to read  Syncing a fork  for instructions on how to keep your fork up to date with the latest changes of the upstream (official)  Islandora-CLAW  repository.  Please note that TravisCI will test for  PSR-2  compliance. You can verify coding standard compliance with  PHP Codesniffer .  Note : Due to differing interpretations of the PSR-2 coding standards do  not  use PHP  Coding Standards Fixer . Coding Standards Fixer may make changes to your code that can cause it to fail our TravisCI tests.  In addition, Islandora 7.x-2.x Committers will review contributions for  PSR-4   compliance.", 
            "title": "Create a pull request"
        }, 
        {
            "location": "/chullo/CONTRIBUTING/#license-agreements", 
            "text": "The Islandora Foundation requires that contributors complete a  Contributor License Agreement  or be covered by a  Corporate Contributor Licencse Agreement . The signed copy of the license agreement should be sent to  community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.", 
            "title": "License Agreements"
        }, 
        {
            "location": "/chullo/README/", 
            "text": "Chullo\n\n\n8.x-1.0\n\n\nChullo is a PHP client for \nFedora 4\n built using \nGuzzle\n and \nEasyRdf\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRequirements\n\n\n\n\nPHP 5.5+\n\n\nComposer\n\n\n\n\nInstallation\n\n\n\n\ngit clone git@github.com:Islandora-CLAW/chullo.git\n\n\ncd chullo\n\n\nphp composer.phar install\n\n\n\n\nYou can also install with composer by pointing to your local clone. Just add these relevant bits to your \ncomposer.json\n:\n\n\n{\n    \nrepositories\n: [\n        {\n            \ntype\n: \nvcs\n,\n            \nurl\n: \n/path/to/chullo\n\n        }\n    ],\n    \nrequire\n: {\n        \nislandora/chullo\n: \ndev-master\n\n    }\n}\n\n\n\n\nThen just \nphp composer.phar install\n as usual.\n\n\nUsage\n\n\nFedora\n\n\nuse Islandora\\Chullo\\Chullo;\n\n// Instantiated with static factory\n$chullo = Chullo::create(\u201chttp://localhost:8080/fcrepo/rest\u201d);\n\n// Create a new resource\n$uri = $chullo-\ncreateResource(); // http://localhost:8080/fcrepo/rest/0b/0b/6c/68/0b0b6c68-30d8-410c-8a0e-154d0fd4ca20\n\n// Parse resource as an EasyRdf Graph\n$graph = $chullo-\ngetGraph($uri);\n\n// Set the resource\u2019s title\n$graph-\nset($uri, 'dc:title', 'My Sweet Title');\n\n// Save the graph to Fedora\n$chullo-\nsaveGraph($uri, $graph);\n\n// Open a transaction\n$transaction = $chullo-\ncreateTransaction(); //tx:2b27e944-483d-4e59-a33b-f378bd42faf5\n\n// Do a bulk upload\nfor ($i = 0; $i \n 20; $i++) {\n    $rdf = \nEOD\n        @prefix dc: \nhttp://purl.org/dc/terms/\n\n\n        \n dc:title \nChild Resource $i\n\nEOD;\n\n    // Using all possible arguments in createResource() this time\n    $child_uri = $chullo-\ncreateResource(\n        $uri,\n        $rdf,\n        ['Content-Type' =\n 'text/turtle'],\n        $transaction,\n        sha1($rdf)\n    );\n}\n\n// Commit it\n$chullo-\ncommitTransaction($transaction);\n\n// Check it out:\necho $uri . \n\\n\n;\n\n\n\n\nTriplestore\n\n\nuse Islandora\\Chullo\\TriplestoreClient;\n\n$triplestore = TriplestoreClient::create('http://127.0.0.1:8080/bigdata/namespace/kb/sparql/');\n\n$sparql = \nEOD\n    PREFIX fedora: \nhttp://fedora.info/definitions/v4/repository#\n\n\n    SELECT ?s\n    WHERE {\n        ?s fedora:hasParent \nhttp://localhost:8080/fcrepo/rest/\n .\n    }\n    LIMIT 25\nEOD;\n\n$results = $triplestore-\nquery($sparql);\n\nforeach ($results as $triple) {\n    echo $triple-\ns . \n\\n\n;\n}\n\n\n\n\nMaintainers/Sponsors\n\n\nCurrent maintainers:\n\n\n\n\nDaniel Lamb\n\n\nNick Ruest\n\n\n\n\nDevelopment\n\n\nIf you would like to contribute to this module, please check out \nCONTRIBUTING.md\n.", 
            "title": "README"
        }, 
        {
            "location": "/chullo/README/#chullo", 
            "text": "", 
            "title": "Chullo"
        }, 
        {
            "location": "/chullo/README/#8x-10", 
            "text": "Chullo is a PHP client for  Fedora 4  built using  Guzzle  and  EasyRdf .", 
            "title": "8.x-1.0"
        }, 
        {
            "location": "/chullo/README/#requirements", 
            "text": "PHP 5.5+  Composer", 
            "title": "Requirements"
        }, 
        {
            "location": "/chullo/README/#installation", 
            "text": "git clone git@github.com:Islandora-CLAW/chullo.git  cd chullo  php composer.phar install   You can also install with composer by pointing to your local clone. Just add these relevant bits to your  composer.json :  {\n     repositories : [\n        {\n             type :  vcs ,\n             url :  /path/to/chullo \n        }\n    ],\n     require : {\n         islandora/chullo :  dev-master \n    }\n}  Then just  php composer.phar install  as usual.", 
            "title": "Installation"
        }, 
        {
            "location": "/chullo/README/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/chullo/README/#fedora", 
            "text": "use Islandora\\Chullo\\Chullo;\n\n// Instantiated with static factory\n$chullo = Chullo::create(\u201chttp://localhost:8080/fcrepo/rest\u201d);\n\n// Create a new resource\n$uri = $chullo- createResource(); // http://localhost:8080/fcrepo/rest/0b/0b/6c/68/0b0b6c68-30d8-410c-8a0e-154d0fd4ca20\n\n// Parse resource as an EasyRdf Graph\n$graph = $chullo- getGraph($uri);\n\n// Set the resource\u2019s title\n$graph- set($uri, 'dc:title', 'My Sweet Title');\n\n// Save the graph to Fedora\n$chullo- saveGraph($uri, $graph);\n\n// Open a transaction\n$transaction = $chullo- createTransaction(); //tx:2b27e944-483d-4e59-a33b-f378bd42faf5\n\n// Do a bulk upload\nfor ($i = 0; $i   20; $i++) {\n    $rdf =  EOD\n        @prefix dc:  http://purl.org/dc/terms/ \n\n          dc:title  Child Resource $i \nEOD;\n\n    // Using all possible arguments in createResource() this time\n    $child_uri = $chullo- createResource(\n        $uri,\n        $rdf,\n        ['Content-Type' =  'text/turtle'],\n        $transaction,\n        sha1($rdf)\n    );\n}\n\n// Commit it\n$chullo- commitTransaction($transaction);\n\n// Check it out:\necho $uri .  \\n ;", 
            "title": "Fedora"
        }, 
        {
            "location": "/chullo/README/#triplestore", 
            "text": "use Islandora\\Chullo\\TriplestoreClient;\n\n$triplestore = TriplestoreClient::create('http://127.0.0.1:8080/bigdata/namespace/kb/sparql/');\n\n$sparql =  EOD\n    PREFIX fedora:  http://fedora.info/definitions/v4/repository# \n\n    SELECT ?s\n    WHERE {\n        ?s fedora:hasParent  http://localhost:8080/fcrepo/rest/  .\n    }\n    LIMIT 25\nEOD;\n\n$results = $triplestore- query($sparql);\n\nforeach ($results as $triple) {\n    echo $triple- s .  \\n ;\n}", 
            "title": "Triplestore"
        }, 
        {
            "location": "/chullo/README/#maintainerssponsors", 
            "text": "Current maintainers:   Daniel Lamb  Nick Ruest", 
            "title": "Maintainers/Sponsors"
        }, 
        {
            "location": "/chullo/README/#development", 
            "text": "If you would like to contribute to this module, please check out  CONTRIBUTING.md .", 
            "title": "Development"
        }, 
        {
            "location": "/crayfish/README/", 
            "text": "Crayfish\n\n\n8.x-1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is a top level container for the various Islandora CLAW microservices, lovingly known as Crayfish. It allows you to mount the various endpoints at one port on one machine and makes a development vagrant/docker configuration easier to produce.\n\n\nPCDM specific services are available with \nPDX\n.\n\n\nRequirements\n\n\n\n\nPHP 5.5+\n\n\nComposer\n\n\nChullo\n\n\nFedora 4\n\n\nA triplestore (i.e. \nBlazeGraph\n, \nFuseki\n, etc)\n\n\n\n\nInstallation\n\n\nYou will need to copy the configuration file \nexample.settings.yml\n to either \nsettings.yml\n or \nsettings.dev.yml\n (if $app['debug'] = TRUE) and change any required settings.\n\n\nYou can run just this service using PHP by executing\n\n\nphp -S localhost:\nsome port\n -t src/ src/index.php\n\n\n\n\nfrom this directory to start it running.\n\n\nServices\n\n\nThis mounts all the various individual microservices under the \n/islandora\n URL, so you currently have access to\n\n\n\n\nResourceService at \n/islandora/resource\n\n\nTransactionService at \n/islandora/transaction\n\n\n\n\nSee the individual services for more information on their endpoints.\n\n\nResourceService\n\n\nThis an Islandora PHP Microservice to perform some middleware functions such as\n\n\n\n\nUUID -\n Fedora4 path translation\n\n\nUUID validation\n\n\nHost header normalization\n\n\n\n\nand pass the request to Chullo.\n\n\nServices\n\n\nThe ResourceService provides the following endpoints for HTTP requests.\n\n\nNote\n: The UUID is of the form \n18c67794-366c-a6d9-af13-b3464a1fb9b5\n\n\n\n\n\n\nGET from \n/resource/{uuid}/{child}\n\n\nfor getting the Fedora Resource from either {uuid} (if {child} is left off), or {child} if both are provided.\n\n\n\n\n\n\nPOST to \n/resource\n\n\nfor creating a new Resource at the root level\n\n\n\n\n\n\nPOST to \n/resource/{uuid}\n\n\nfor creating a new Resource as a child of resource {uuid}\n\n\n\n\n\n\nPUT to \n/resource/{uuid}/{child}\n\n\nfor creating a new Resource with a predefined name {child} under the parent {uuid}, to PUT at root leave the {uuid} blank (ie. //).\n\n\n\n\n\n\nPATCH to \n/resource/{uuid}/{child}\n\n\nfor patching a resource at either {uuid} (if {child} is left off), or {child} if both are provided.\n\n\n\n\n\n\nDELETE to \n/resource/{uuid}/{child}\n\n\nfor deleting a resource at either {uuid} (if {child} is left off), or {child} if both are provided.\n\n\n\n\n\n\nTransactionService\n\n\nThis an Islandora PHP Microservice to create/extend/commit or rollback Fedora 4 transactions\n\n\nServices\n\n\nThe TransactionService provides the following endpoints for HTTP requests.\n\n\nNote\n: The transaction ID (or txID) is of the form \ntx:83e34464-144e-43d9-af13-b3464a1fb9b5\n\n\n\n\n\n\nPOST to \n/transaction\n\n\nfor creating a new transaction. It returns the transaction ID in the Location: header. It can be retrieved by passing the Response to the \ngetId()\n function.\n\n\n\n\n\n\nPOST to \n/transaction/{txID}/extend\n\n\nfor extending a transaction. Normally a transaction will expire once it has sat for approximately 3 minutes without any interactions. This allows you to extend the transaction without performing any other interaction.\n\n\n\n\n\n\nPOST to \n/transaction/{txID}/commit\n\n\nto commit the transaction.\n\n\n\n\n\n\nPOST to \n/transaction/{txID}/rollback\n\n\nto rollback a transaction\n\n\n\n\n\n\nSponsors\n\n\n\n\nUPEI\n\n\ndiscoverygarden inc.\n\n\nLYRASIS\n\n\nMcMaster University\n\n\nUniversity of Limerick\n\n\nYork University\n\n\nUniversity of Manitoba\n\n\nSimon Fraser University\n\n\nPALS\n\n\nAmerican Philosophical Society\n\n\ncommon media inc.\n\n\n\n\nMaintainers\n\n\n\n\nJared Whiklo\n\n\nDiego Pino\n\n\nNick Ruest\n\n\n\n\nLicense\n\n\nMIT", 
            "title": "README"
        }, 
        {
            "location": "/crayfish/README/#crayfish", 
            "text": "", 
            "title": "Crayfish"
        }, 
        {
            "location": "/crayfish/README/#8x-10", 
            "text": "This is a top level container for the various Islandora CLAW microservices, lovingly known as Crayfish. It allows you to mount the various endpoints at one port on one machine and makes a development vagrant/docker configuration easier to produce.  PCDM specific services are available with  PDX .", 
            "title": "8.x-1.0"
        }, 
        {
            "location": "/crayfish/README/#requirements", 
            "text": "PHP 5.5+  Composer  Chullo  Fedora 4  A triplestore (i.e.  BlazeGraph ,  Fuseki , etc)", 
            "title": "Requirements"
        }, 
        {
            "location": "/crayfish/README/#installation", 
            "text": "You will need to copy the configuration file  example.settings.yml  to either  settings.yml  or  settings.dev.yml  (if $app['debug'] = TRUE) and change any required settings.  You can run just this service using PHP by executing  php -S localhost: some port  -t src/ src/index.php  from this directory to start it running.", 
            "title": "Installation"
        }, 
        {
            "location": "/crayfish/README/#services", 
            "text": "This mounts all the various individual microservices under the  /islandora  URL, so you currently have access to   ResourceService at  /islandora/resource  TransactionService at  /islandora/transaction   See the individual services for more information on their endpoints.", 
            "title": "Services"
        }, 
        {
            "location": "/crayfish/README/#resourceservice", 
            "text": "This an Islandora PHP Microservice to perform some middleware functions such as   UUID -  Fedora4 path translation  UUID validation  Host header normalization   and pass the request to Chullo.", 
            "title": "ResourceService"
        }, 
        {
            "location": "/crayfish/README/#services_1", 
            "text": "The ResourceService provides the following endpoints for HTTP requests.  Note : The UUID is of the form  18c67794-366c-a6d9-af13-b3464a1fb9b5    GET from  /resource/{uuid}/{child}  for getting the Fedora Resource from either {uuid} (if {child} is left off), or {child} if both are provided.    POST to  /resource  for creating a new Resource at the root level    POST to  /resource/{uuid}  for creating a new Resource as a child of resource {uuid}    PUT to  /resource/{uuid}/{child}  for creating a new Resource with a predefined name {child} under the parent {uuid}, to PUT at root leave the {uuid} blank (ie. //).    PATCH to  /resource/{uuid}/{child}  for patching a resource at either {uuid} (if {child} is left off), or {child} if both are provided.    DELETE to  /resource/{uuid}/{child}  for deleting a resource at either {uuid} (if {child} is left off), or {child} if both are provided.", 
            "title": "Services"
        }, 
        {
            "location": "/crayfish/README/#transactionservice", 
            "text": "This an Islandora PHP Microservice to create/extend/commit or rollback Fedora 4 transactions", 
            "title": "TransactionService"
        }, 
        {
            "location": "/crayfish/README/#services_2", 
            "text": "The TransactionService provides the following endpoints for HTTP requests.  Note : The transaction ID (or txID) is of the form  tx:83e34464-144e-43d9-af13-b3464a1fb9b5    POST to  /transaction  for creating a new transaction. It returns the transaction ID in the Location: header. It can be retrieved by passing the Response to the  getId()  function.    POST to  /transaction/{txID}/extend  for extending a transaction. Normally a transaction will expire once it has sat for approximately 3 minutes without any interactions. This allows you to extend the transaction without performing any other interaction.    POST to  /transaction/{txID}/commit  to commit the transaction.    POST to  /transaction/{txID}/rollback  to rollback a transaction", 
            "title": "Services"
        }, 
        {
            "location": "/crayfish/README/#sponsors", 
            "text": "UPEI  discoverygarden inc.  LYRASIS  McMaster University  University of Limerick  York University  University of Manitoba  Simon Fraser University  PALS  American Philosophical Society  common media inc.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/crayfish/README/#maintainers", 
            "text": "Jared Whiklo  Diego Pino  Nick Ruest", 
            "title": "Maintainers"
        }, 
        {
            "location": "/crayfish/README/#license", 
            "text": "MIT", 
            "title": "License"
        }, 
        {
            "location": "/install/README/", 
            "text": "Introduction\n\n\n8.x-1.0\n\n\nThe is a development environment virtual machine for the Islandora and Fedora 4 project. It should work on any operating system that supports VirtualBox and Vagrant.\n\n\nN.B. This virtual machine \nshould not\n be used in production.\n\n\nRequirements\n\n\n\n\nVirtualBox\n\n\nVagrant\n 1.8.5+\n\n\ngit\n\n\n\n\nVariables\n\n\nSystem Resources\n\n\nBy default the virtual machine that is built uses 2GB of RAM. Your host machine will need to be able to support the additional memory use. You can override the CPU and RAM allocation by creating \nISLANDORA_VAGRANT_CPUS\n and \nISLANDORA_VAGRANT_MEMORY\n environment variables and setting the values. For example, on an Ubuntu host you could add to \n~/.bashrc\n:\n\n\nexport ISLANDORA_VAGRANT_CPUS=4\nexport ISLANDORA_VAGRANT_MEMORY=4096\n\n\n\n\nHostname and Description\n\n\nIf you use a DNS or host file management plugin with Vagrant, you may want to set a specific hostname for the virtual machine. You can do that with the \nISLANDORA_VAGRANT_HOSTNAME\n variable.  The \nISLANDORA_VAGRANT_VIRTUALBOXDESCRIPTION\n variables can be used to track the VM build. For example:\n\n\nexport ISLANDORA_VAGRANT_HOSTNAME=\nislandora-deux\n\nexport ISLANDORA_VAGRANT_VIRTUALBOXDESCRIPTION=\nIslandora CLAW\n\n\n\n\n\nUse\n\n\nVirtualBox:\n\n\n\n\ngit clone https://github.com/Islandora-CLAW/CLAW\n\n\ncd CLAW/install\n\n\nvagrant up\n\n\n\n\nDigitalOcean:\n\n\n\n\ngit clone https://github.com/Islandora-CLAW/CLAW\n\n\ncd CLAW/install\n\n\nvagrant plugin install vagrant-digitalocean\n\n\nSet the following environment variables:\n\n\nDIGITALOCEAN_TOKEN\n -- Your DigitalOcean API token\n\n\nDIGITALOCEAN_KEYNAME\n -- Your DigitalOcean ssh key name\n\n\nDIGITALOCEAN_KEYPATH\n -- Path to your ssh keys that you've setup with DigitalOcean\n\n\nvagrant up --provider=digital_ocean\n\n\n\n\nAmazon:\n\n\n\n\ngit clone https://github.com/Islandora-CLAW/CLAW\n\n\ncd CLAW/install\n\n\nvagrant plugin install vagrant-aws\n\n\nSet the following environment variables:\n\n\nAWS_KEY\n\n\nAWS_SECRET\n\n\nAWS_KEYNAME\n\n\nAWS_KEYPATH\n\n\nvagrant up --provider=aws\n\n\n\n\nN.B. You may not be able to connect to your AWS instance depending on VPC settings.\n\n\nConnect\n\n\nYou can connect to the machine via the browser at \nhttp://localhost:8000\n.\n\n\nThe default Drupal login details are:\n\n\n\n\nusername: admin\n\n\npassword: islandora\n\n\n\n\nMySQL:\n\n\n\n\nusername: root\n\n\npassword: islandora\n\n\n\n\nThe Fedora 4 REST API can be accessed at \nhttp://localhost:8080/fcrepo/rest\n.  It currently has authentication disabled.\n\n\nTomcat Manager:\n\n\n\n\nusername: islandora\n\n\npassword: islandora\n\n\n\n\nYou can connect to the machine via ssh: \nssh -p 2222 vagrant@localhost\n\n\nThe default VM login details are:\n\n\n\n\nusername: vagrant\n\n\npassword: vagrant\n\n\n\n\nEnvironment\n\n\n\n\nUbuntu 14.04.4\n\n\nDrupal 8.1.3\n\n\nMySQL 5.5.49\n\n\nApache 2.24.7\n\n\nTomcat 7.0.52\n\n\nSolr 4.10.3\n\n\nCamel 2.14.1\n\n\nFedora 4.5.1\n\n\nFedora Camel Component 4.2.0\n\n\nBlazeGraph 1.5.1\n\n\nKaraf 4.0.5\n\n\nSync 0.0.0\n\n\nIslandora 7.x-2.x\n\n\nPHP 5.6.22 and 7.0.7\n\n\nJava 8 (Oracle)\n\n\n\n\nWindows Troubleshooting\n\n\nIf you receive errors involving \n\\r\n (end of line) you have two options:\n\n\n\n\nClone down the current development branch using \n--single-branch\n.\n\n\n\n\ngit clone --single-branch --branch sprint-002 git@github.com:Islandora-CLAW/CLAW.git \noptional directory name\n\n  A benifit to this approach is that files created or edited on a Windows environment will be pushed back to your fork with appropriate \nLF\n endings.\n\n\n\n\nModify your global \n.gitconfig\n file to disable the Windows behavior of \nautocrlf\n entirely.\n\n\n\n\nEdit the global \n.gitconfig\n file, find the line:\n  \nautocrlf = true\n\n  and change it to\n  \nautocrlf = false\n\n  Remove and clone again. This will prevent Windows git clients from automatically replacing Unix line endings LF with Windows line endings CRLF.", 
            "title": "README"
        }, 
        {
            "location": "/install/README/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/install/README/#8x-10", 
            "text": "The is a development environment virtual machine for the Islandora and Fedora 4 project. It should work on any operating system that supports VirtualBox and Vagrant.  N.B. This virtual machine  should not  be used in production.", 
            "title": "8.x-1.0"
        }, 
        {
            "location": "/install/README/#requirements", 
            "text": "VirtualBox  Vagrant  1.8.5+  git", 
            "title": "Requirements"
        }, 
        {
            "location": "/install/README/#variables", 
            "text": "", 
            "title": "Variables"
        }, 
        {
            "location": "/install/README/#system-resources", 
            "text": "By default the virtual machine that is built uses 2GB of RAM. Your host machine will need to be able to support the additional memory use. You can override the CPU and RAM allocation by creating  ISLANDORA_VAGRANT_CPUS  and  ISLANDORA_VAGRANT_MEMORY  environment variables and setting the values. For example, on an Ubuntu host you could add to  ~/.bashrc :  export ISLANDORA_VAGRANT_CPUS=4\nexport ISLANDORA_VAGRANT_MEMORY=4096", 
            "title": "System Resources"
        }, 
        {
            "location": "/install/README/#hostname-and-description", 
            "text": "If you use a DNS or host file management plugin with Vagrant, you may want to set a specific hostname for the virtual machine. You can do that with the  ISLANDORA_VAGRANT_HOSTNAME  variable.  The  ISLANDORA_VAGRANT_VIRTUALBOXDESCRIPTION  variables can be used to track the VM build. For example:  export ISLANDORA_VAGRANT_HOSTNAME= islandora-deux \nexport ISLANDORA_VAGRANT_VIRTUALBOXDESCRIPTION= Islandora CLAW", 
            "title": "Hostname and Description"
        }, 
        {
            "location": "/install/README/#use", 
            "text": "VirtualBox:   git clone https://github.com/Islandora-CLAW/CLAW  cd CLAW/install  vagrant up   DigitalOcean:   git clone https://github.com/Islandora-CLAW/CLAW  cd CLAW/install  vagrant plugin install vagrant-digitalocean  Set the following environment variables:  DIGITALOCEAN_TOKEN  -- Your DigitalOcean API token  DIGITALOCEAN_KEYNAME  -- Your DigitalOcean ssh key name  DIGITALOCEAN_KEYPATH  -- Path to your ssh keys that you've setup with DigitalOcean  vagrant up --provider=digital_ocean   Amazon:   git clone https://github.com/Islandora-CLAW/CLAW  cd CLAW/install  vagrant plugin install vagrant-aws  Set the following environment variables:  AWS_KEY  AWS_SECRET  AWS_KEYNAME  AWS_KEYPATH  vagrant up --provider=aws   N.B. You may not be able to connect to your AWS instance depending on VPC settings.", 
            "title": "Use"
        }, 
        {
            "location": "/install/README/#connect", 
            "text": "You can connect to the machine via the browser at  http://localhost:8000 .  The default Drupal login details are:   username: admin  password: islandora   MySQL:   username: root  password: islandora   The Fedora 4 REST API can be accessed at  http://localhost:8080/fcrepo/rest .  It currently has authentication disabled.  Tomcat Manager:   username: islandora  password: islandora   You can connect to the machine via ssh:  ssh -p 2222 vagrant@localhost  The default VM login details are:   username: vagrant  password: vagrant", 
            "title": "Connect"
        }, 
        {
            "location": "/install/README/#environment", 
            "text": "Ubuntu 14.04.4  Drupal 8.1.3  MySQL 5.5.49  Apache 2.24.7  Tomcat 7.0.52  Solr 4.10.3  Camel 2.14.1  Fedora 4.5.1  Fedora Camel Component 4.2.0  BlazeGraph 1.5.1  Karaf 4.0.5  Sync 0.0.0  Islandora 7.x-2.x  PHP 5.6.22 and 7.0.7  Java 8 (Oracle)", 
            "title": "Environment"
        }, 
        {
            "location": "/install/README/#windows-troubleshooting", 
            "text": "If you receive errors involving  \\r  (end of line) you have two options:   Clone down the current development branch using  --single-branch .   git clone --single-branch --branch sprint-002 git@github.com:Islandora-CLAW/CLAW.git  optional directory name \n  A benifit to this approach is that files created or edited on a Windows environment will be pushed back to your fork with appropriate  LF  endings.   Modify your global  .gitconfig  file to disable the Windows behavior of  autocrlf  entirely.   Edit the global  .gitconfig  file, find the line:\n   autocrlf = true \n  and change it to\n   autocrlf = false \n  Remove and clone again. This will prevent Windows git clients from automatically replacing Unix line endings LF with Windows line endings CRLF.", 
            "title": "Windows Troubleshooting"
        }, 
        {
            "location": "/islandora/README/", 
            "text": "claw-drupal8\n\n\n8.x-1.0", 
            "title": "README"
        }, 
        {
            "location": "/islandora/README/#claw-drupal8", 
            "text": "", 
            "title": "claw-drupal8"
        }, 
        {
            "location": "/islandora/README/#8x-10", 
            "text": "", 
            "title": "8.x-1.0"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/", 
            "text": "Fedora 3.x namespace RELS-EXT predicates\n\n\n$ grep -R \"FEDORA_RELS_EXT_URI\" Islandora-7.x\n\n\nIslandora\n\n\n\n\nisMemberOfCollection\n\n\nisMemberOf\n\n\n\n\nImage Annotation\n\n\n\n\nisAnnotationOf\n\n\n\n\nCompound\n\n\n\n\nisConstituentOf\n\n\nisPartOf", 
            "title": "Fedora namespace predicates"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/#fedora-3x-namespace-rels-ext-predicates", 
            "text": "$ grep -R \"FEDORA_RELS_EXT_URI\" Islandora-7.x", 
            "title": "Fedora 3.x namespace RELS-EXT predicates"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/#islandora", 
            "text": "isMemberOfCollection  isMemberOf", 
            "title": "Islandora"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/#image-annotation", 
            "text": "isAnnotationOf", 
            "title": "Image Annotation"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/#compound", 
            "text": "isConstituentOf  isPartOf", 
            "title": "Compound"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/", 
            "text": "Islandora namespace RELS-EXT predicates\n\n\n$ grep -R \"ISLANDORA_RELS_EXT_URI\" Islandora-7.x\n\n\nBook\n\n\n\n\nisPageOf\n\n\nisSequenceNumber\n\n\nisPageNumber\n\n\nisSection\n\n\n\n\nImage Annotation\n\n\n\n\ntargetedBy\n\n\ntargets\n\n\nhasColor\n\n\nhasURN\n\n\nstrokeWidth\n\n\nisEntity\n\n\nisAnnotationType\n\n\n\n\nOCR\n\n\n\n\nhasLanguage\n\n\ngenerate_ocr\n\n\n\n\nBook Batch\n\n\n\n\nbook-batched\n\n\nemail-admin-when-ingested\n\n\n\n\nNewspaper\n\n\n\n\nisPageOf\n\n\nisSequenceNumber\n\n\ndateIssued\n\n\n\n\nXACML\n\n\n\n\nisViewableByRole\n\n\nisManageableByRole\n\n\nisViewableByUser\n\n\nisManageableByUser\n\n\n\n\nPaged Content\n\n\n\n\nhasLanguage\n\n\nisPageOf\n\n\nisSequenceNumber\n\n\nisPageNumber\n\n\nisSection\n\n\n\n\nCompound\n\n\n\n\nisSequenceNumberOf$escaped_pid", 
            "title": "Islandora namespace predicates"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#islandora-namespace-rels-ext-predicates", 
            "text": "$ grep -R \"ISLANDORA_RELS_EXT_URI\" Islandora-7.x", 
            "title": "Islandora namespace RELS-EXT predicates"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#book", 
            "text": "isPageOf  isSequenceNumber  isPageNumber  isSection", 
            "title": "Book"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#image-annotation", 
            "text": "targetedBy  targets  hasColor  hasURN  strokeWidth  isEntity  isAnnotationType", 
            "title": "Image Annotation"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#ocr", 
            "text": "hasLanguage  generate_ocr", 
            "title": "OCR"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#book-batch", 
            "text": "book-batched  email-admin-when-ingested", 
            "title": "Book Batch"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#newspaper", 
            "text": "isPageOf  isSequenceNumber  dateIssued", 
            "title": "Newspaper"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#xacml", 
            "text": "isViewableByRole  isManageableByRole  isViewableByUser  isManageableByUser", 
            "title": "XACML"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#paged-content", 
            "text": "hasLanguage  isPageOf  isSequenceNumber  isPageNumber  isSection", 
            "title": "Paged Content"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#compound", 
            "text": "isSequenceNumberOf$escaped_pid", 
            "title": "Compound"
        }, 
        {
            "location": "/migration/migration/", 
            "text": "fcrepo3 Object properties to fcrepo4\n\n\n\n\n\n\n\n\nfcrepo 3\n\n\nfcrepo4\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nPID\n\n\nfedora3model:PID\u2020\n\n\nyul:328697\n\n\n\n\n\n\nstate\n\n\nfedoraaccess:objState\n\n\nActive\n\n\n\n\n\n\nlabel\n\n\nfedora3model:label\u2020\n\n\nElvis Presley\n\n\n\n\n\n\ncreateDate\n\n\npremis:hasDateCreatedByApplication\n\n\n2015-03-16T20:11:06.683Z\n\n\n\n\n\n\nlastModifiedDate\n\n\nmetadataModification\n\n\n2015-03-16T20:11:06.683Z\n\n\n\n\n\n\nownerId\n\n\nfedora3model:ownerId\u2020\n\n\nnruest\n\n\n\n\n\n\n\n\n\u2020 The \nfedora3model\n namespace is not a published namespace. It is a representation of the fcrepo3 namespace \ninfo:fedora/fedora-system:def/model\n. \n\n\u2021 Not yet implemented\n\n\nfcrepo3 Datastream properties to fcrepo4\n\n\n\n\n\n\n\n\nfcrepo3\n\n\nfcrepo4\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nDSID\n\n\ndcterms:identifier\n\n\nOBJ\n\n\n\n\n\n\nLabel\n\n\ndcterms:title\u2021\n\n\nASC19109.tif\n\n\n\n\n\n\nMIME Type\n\n\nebucore:hasMimeType\u2020\n\n\nimage/tiff\n\n\n\n\n\n\nState\n\n\nfedoraaccess:objState\n\n\nActive\n\n\n\n\n\n\nCreated\n\n\npremis:hasDateCreatedByApplication\n\n\n2015-03-16T20:11:06.683Z\n\n\n\n\n\n\nVersionable\n\n\nfedora:hasVersions\u2021\n\n\ntrue\n\n\n\n\n\n\nFormat URI\n\n\npremis:formatDesignation\u2021\n\n\ninfo:pronom/fmt/156\n\n\n\n\n\n\nAlternate IDs\n\n\ndcterms:identifier\u2021\n\n\n\n\n\n\n\n\nAccess URL\n\n\ndcterms:identifier\u2021\n\n\n\n\n\n\n\n\nChecksum\n\n\ncryptofunc:\nhashalgorithm\n\u2021\n\n\ncryptofunc:sha1 \"c91342b705b15cb4f6ac5362cc6a47d9425aec86\"\n\n\n\n\n\n\n\n\n\u2020 The \nfedora3model\n namespace is not a published namespace. It is a representation of the fcrepo3 namespace \ninfo:fedora/fedora-system:def/model\n. \n\n\u2021 Not yet implemented\n\n\nfcrepo3 RELS-EXT to fcrepo4 Mapping\n\n\n\n\n\n\n\n\nfcrepo3\n\n\nExample\n\n\nfcrepo4\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nfedora:isMemberOfCollection\n\n\nrdf:resource=\"info:fedora/yul:F0433\"\n\n\nfedora:hasParent\n\n\n\n\n\n\n\n\nfedora-model:hasModel\n\n\nrdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\"\n\n\nrdf:type\n\n\nislandora:largeImage\n\n\n\n\n\n\nislandora:inheritXacmlFrom\n\n\nrdf:resource=\"info:fedora/yul:F0433\"\n\n\n\n\n\n\n\n\n\n\nislandora:hasLanguage\n\n\nfra\n\n\ndcterms:language\n\n\nfra\n\n\n\n\n\n\nislandora:isPageOf\n\n\nrdf:resource=\"info:fedora/yul:336566\"\n\n\n\n\n\n\n\n\n\n\nislandora:isSequenceNumber\n\n\n213\n\n\n\n\n\n\n\n\n\n\nislandora:isPageNumber\n\n\n213\n\n\n\n\n\n\n\n\n\n\nislandora:isSection\n\n\n1\n\n\n\n\n\n\n\n\n\n\nfedora:isConstituentOf\n\n\nrdf:resource=\"info:fedora/yul:271119\"\n\n\nfedora:hasParent\n\n\n\n\n\n\n\n\nislandora:isSequenceNumberOfyul_271119\n\n\n1\n\n\n\n\n\n\n\n\n\n\nislandora:dateIssued\n\n\n1945-10-31\n\n\n\n\n\n\n\n\n\n\nislandora:isSequenceNumber\n\n\n2023\n\n\n\n\n\n\n\n\n\n\nislandora:isMemberOf\n\n\nislandora:sp_large_image_cmodel\n\n\nfedora:hasParent\n\n\n\n\n\n\n\n\nfedora:isAnnotationOf\n\n\nrdf:resource=\"info:fedora/islandora:96\n\n\n\n\n\n\n\n\n\n\nislandora:targetedBy\n\n\nadmin\n\n\n\n\n\n\n\n\n\n\nislandora:isAnnotationType\n\n\nmy type\n\n\n\n\n\n\n\n\n\n\nislandora:hasURN\n\n\nurn:uuid:C691142D-FCC0-0001-F6B3-1390128014A5\n\n\n\n\n\n\n\n\n\n\nislandora:targets\n\n\ninfo:fedora/islandora:96\n\n\n\n\n\n\n\n\n\n\nislandora:isViewableByUser\n\n\nnruest\n\n\n\n\n\n\n\n\n\n\nislandora:isViewableByRole\n\n\nislandora creator\n\n\n\n\n\n\n\n\n\n\nislandora:isManageableByUser\n\n\nnruest\n\n\n\n\n\n\n\n\n\n\nislandora:isManageableByRole\n\n\nislandora administrator\n\n\n\n\n\n\n\n\n\n\n\n\nSamples\n\n\nLarge Image object\n\n\n\n\nrdf:RDF xmlns:rdf=\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n xmlns:fedora=\ninfo:fedora/fedora-system:def/relations-external#\n xmlns:fedora-model=\ninfo:fedora/fedora-system:def/model#\n xmlns:islandora=\nhttp://islandora.ca/ontology/relsext#\n\n  \nrdf:Description rdf:about=\ninfo:fedora/yul:328697\n\n    \nfedora:isMemberOfCollection rdf:resource=\ninfo:fedora/yul:F0433\n/fedora:isMemberOfCollection\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:sp_large_image_cmodel\n/fedora-model:hasModel\n\n    \nislandora:inheritXacmlFrom rdf:resource=\ninfo:fedora/yul:F0433\n/islandora:inheritXacmlFrom\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nPage object\n\n\n\n\nrdf:RDF xmlns:rdf=\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n xmlns:fedora=\ninfo:fedora/fedora-system:def/relations-external#\n xmlns:fedora-model=\ninfo:fedora/fedora-system:def/model#\n xmlns:islandora=\nhttp://islandora.ca/ontology/relsext#\n\n  \nrdf:Description rdf:about=\ninfo:fedora/yul:336779\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:pageCModel\n/fedora-model:hasModel\n\n    \nislandora:hasLanguage\nfra\n/islandora:hasLanguage\n\n    \nislandora:isPageOf rdf:resource=\ninfo:fedora/yul:336566\n/islandora:isPageOf\n\n    \nislandora:isSequenceNumber\n213\n/islandora:isSequenceNumber\n\n    \nislandora:isPageNumber\n213\n/islandora:isPageNumber\n\n    \nislandora:isSection\n1\n/islandora:isSection\n\n    \nfedora:isMemberOf rdf:resource=\ninfo:fedora/yul:336566\n/fedora:isMemberOf\n\n    \nislandora:inheritXacmlFrom rdf:resource=\ninfo:fedora/yul:336566\n/islandora:inheritXacmlFrom\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nCompound object (child)\n\n\n\n\nrdf:RDF xmlns:fedora=\ninfo:fedora/fedora-system:def/relations-external#\n xmlns:fedora-model=\ninfo:fedora/fedora-system:def/model#\n xmlns:islandora=\nhttp://islandora.ca/ontology/relsext#\n xmlns:rdf=\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\n  \nrdf:Description rdf:about=\ninfo:fedora/yul:271117\n\n    \nfedora:isMemberOfCollection rdf:resource=\ninfo:fedora/yul:F0375\n/fedora:isMemberOfCollection\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:sp_large_image_cmodel\n/fedora-model:hasModel\n\n    \nislandora:inheritXacmlFrom rdf:resource=\ninfo:fedora/yul:F0375\n/islandora:inheritXacmlFrom\n\n    \nfedora:isConstituentOf rdf:resource=\ninfo:fedora/yul:271119\n/fedora:isConstituentOf\n\n    \nislandora:isSequenceNumberOfyul_271119\n1\n/islandora:isSequenceNumberOfyul_271119\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nNewspaper object\n\n\n\n\nrdf:RDF\n\n  \nrdf:Description rdf:about=\ninfo:fedora/uofm:1243378\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:newspaperCModel\n/\n\n    \nfedora:isMemberOfCollection rdf:resource=\ninfo:fedora/uofm:libraries\n/\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nNewspaper issue object\n\n\n\n\nrdf:RDF\n\n  \nrdf:Description rdf:about=\ninfo:fedora/uofm:1351347\n\n    \nfedora:isMemberOf rdf:resource=\ninfo:fedora/uofm:1243378\n/\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:newspaperIssueCModel\n/\n\n    \nislandora:dateIssued\n1945-10-31\n/islandora:dateIssued\n\n    \nislandora:isSequenceNumber\n2023\n/islandora:isSequenceNumber\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nNewspaper page object\n\n\n\n\nrdf:RDF\n\n  \nrdf:Description rdf:about=\ninfo:fedora/uofm:1351348\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:newspaperPageCModel\n/\n\n    \nfedora:isMemberOf rdf:resource=\ninfo:fedora/uofm:1351347\n/\n\n    \nislandora:isPageOf rdf:resource=\ninfo:fedora/uofm:1351347\n/\n\n    \nislandora:isSequenceNumber\n1\n/islandora:isSequenceNumber\n\n    \nislandora:isPageNumber\n1\n/islandora:isPageNumber\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nAudit log migration\n\n\nauditTrail mapping\n\n\n\n\n\n\n\n\nfcrepo3 event\n\n\nfcrepo4 Event Type\n\n\n\n\n\n\n\n\n\n\naddDatastream\n\n\npremis:ing\u2021\n\n\n\n\n\n\nmodifyDatastreamByReference\n\n\naudit:contentModification/metadataModification\u2021\n\n\n\n\n\n\nmodifyObject\n\n\naudit:resourceModification\u2021\n\n\n\n\n\n\nmodifyObject (checksum validation)\n\n\npremis:validation\u2021\n\n\n\n\n\n\nmodifyDatastreamByValue\n\n\naudit:contentModification/metadataModification\u2021\n\n\n\n\n\n\npurgeDatastream\n\n\naudit:contentRemoval\u2021\n\n\n\n\n\n\n\n\n\u2020 The \nfedora3model\n namespace is not a published namespace. It is a representation of the fcrepo3 namespace \ninfo:fedora/fedora-system:def/model\n. \n\n\u2021 Not yet implemented\n\n\nExamples\n:\n\n\naddDatastream\n\n\naudit:record ID=\nAUDREC1\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\naddDatastream\n/audit:action\n\n\naudit:componentID\nTECHMD_FITS\n/audit:componentID\n\n\naudit:responsibility\njoanna\n/audit:responsibility\n\n\naudit:date\n2013-06-21T14:54:27.396Z\n/audit:date\n\n\naudit:justification\nCopied datastream from yul:61282.\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\nmodifyDatastreamByReference\n\n\naudit:record ID=\nAUDREC4\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\nmodifyDatastreamByReference\n/audit:action\n\n\naudit:componentID\nTN\n/audit:componentID\n\n\naudit:responsibility\nfedoraAdmin\n/audit:responsibility\n\n\naudit:date\n2013-06-22T05:14:34.443Z\n/audit:date\n\n\naudit:justification\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\nmodifyObject\n\n\naudit:record ID=\nAUDREC5\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\nmodifyObject\n/audit:action\n\n\naudit:componentID\n/audit:componentID\n\n\naudit:responsibility\njoanna\n/audit:responsibility\n\n\naudit:date\n2013-07-02T14:31:59.699Z\n/audit:date\n\n\naudit:justification\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\nmodifyObject (checksum validation)\n\n\naudit:record ID=\nAUDREC23\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\nmodifyObject\n/audit:action\n\n\naudit:componentID\n/audit:componentID\n\n\naudit:responsibility\nanonymous\n/audit:responsibility\n\n\naudit:date\n2014-01-22T21:07:43.502Z\n/audit:date\n\n\naudit:justification\nPREMIS:file=yul:96031+FULL_TEXT+FULL_TEXT.0; PREMIS:eventType=fixity check; PREMIS:eventOutcome=SHA-1 checksum validated.\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\nmodifyDatastreamByValue\n\n\naudit:record ID=\nAUDREC16\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\nmodifyDatastreamByValue\n/audit:action\n\n\naudit:componentID\nRELS-EXT\n/audit:componentID\n\n\naudit:responsibility\nnruest\n/audit:responsibility\n\n\naudit:date\n2013-11-27T15:42:08.823Z\n/audit:date\n\n\naudit:justification\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\npurgeDatastream\n\n\naudit:record ID=\nAUDREC15\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\npurgeDatastream\n/audit:action\n\n\naudit:componentID\nMKV\n/audit:componentID\n\n\naudit:responsibility\nfedoraAdmin\n/audit:responsibility\n\n\naudit:date\n2015-04-08T14:37:54.963Z\n/audit:date\n\n\naudit:justification\nPurged datastream (ID=MKV), versions ranging from the beginning of time to the end of time.  This resulted in the permanent removal of 1 datastream version(s) (2015-02-19T21:01:56.235Z) and all associated audit records.\n/audit:justification\n\n\n\n\n\nDiagrams\n\n\nExample Islandora (Large Image Object), PCDM, and Fedora 4 structure", 
            "title": "Migration"
        }, 
        {
            "location": "/migration/migration/#fcrepo3-object-properties-to-fcrepo4", 
            "text": "fcrepo 3  fcrepo4  Example      PID  fedora3model:PID\u2020  yul:328697    state  fedoraaccess:objState  Active    label  fedora3model:label\u2020  Elvis Presley    createDate  premis:hasDateCreatedByApplication  2015-03-16T20:11:06.683Z    lastModifiedDate  metadataModification  2015-03-16T20:11:06.683Z    ownerId  fedora3model:ownerId\u2020  nruest     \u2020 The  fedora3model  namespace is not a published namespace. It is a representation of the fcrepo3 namespace  info:fedora/fedora-system:def/model .  \n\u2021 Not yet implemented", 
            "title": "fcrepo3 Object properties to fcrepo4"
        }, 
        {
            "location": "/migration/migration/#fcrepo3-datastream-properties-to-fcrepo4", 
            "text": "fcrepo3  fcrepo4  Example      DSID  dcterms:identifier  OBJ    Label  dcterms:title\u2021  ASC19109.tif    MIME Type  ebucore:hasMimeType\u2020  image/tiff    State  fedoraaccess:objState  Active    Created  premis:hasDateCreatedByApplication  2015-03-16T20:11:06.683Z    Versionable  fedora:hasVersions\u2021  true    Format URI  premis:formatDesignation\u2021  info:pronom/fmt/156    Alternate IDs  dcterms:identifier\u2021     Access URL  dcterms:identifier\u2021     Checksum  cryptofunc: hashalgorithm \u2021  cryptofunc:sha1 \"c91342b705b15cb4f6ac5362cc6a47d9425aec86\"     \u2020 The  fedora3model  namespace is not a published namespace. It is a representation of the fcrepo3 namespace  info:fedora/fedora-system:def/model .  \n\u2021 Not yet implemented", 
            "title": "fcrepo3 Datastream properties to fcrepo4"
        }, 
        {
            "location": "/migration/migration/#fcrepo3-rels-ext-to-fcrepo4-mapping", 
            "text": "fcrepo3  Example  fcrepo4  Example      fedora:isMemberOfCollection  rdf:resource=\"info:fedora/yul:F0433\"  fedora:hasParent     fedora-model:hasModel  rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\"  rdf:type  islandora:largeImage    islandora:inheritXacmlFrom  rdf:resource=\"info:fedora/yul:F0433\"      islandora:hasLanguage  fra  dcterms:language  fra    islandora:isPageOf  rdf:resource=\"info:fedora/yul:336566\"      islandora:isSequenceNumber  213      islandora:isPageNumber  213      islandora:isSection  1      fedora:isConstituentOf  rdf:resource=\"info:fedora/yul:271119\"  fedora:hasParent     islandora:isSequenceNumberOfyul_271119  1      islandora:dateIssued  1945-10-31      islandora:isSequenceNumber  2023      islandora:isMemberOf  islandora:sp_large_image_cmodel  fedora:hasParent     fedora:isAnnotationOf  rdf:resource=\"info:fedora/islandora:96      islandora:targetedBy  admin      islandora:isAnnotationType  my type      islandora:hasURN  urn:uuid:C691142D-FCC0-0001-F6B3-1390128014A5      islandora:targets  info:fedora/islandora:96      islandora:isViewableByUser  nruest      islandora:isViewableByRole  islandora creator      islandora:isManageableByUser  nruest      islandora:isManageableByRole  islandora administrator       Samples  Large Image object   rdf:RDF xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns#  xmlns:fedora= info:fedora/fedora-system:def/relations-external#  xmlns:fedora-model= info:fedora/fedora-system:def/model#  xmlns:islandora= http://islandora.ca/ontology/relsext# \n   rdf:Description rdf:about= info:fedora/yul:328697 \n     fedora:isMemberOfCollection rdf:resource= info:fedora/yul:F0433 /fedora:isMemberOfCollection \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:sp_large_image_cmodel /fedora-model:hasModel \n     islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:F0433 /islandora:inheritXacmlFrom \n   /rdf:Description  /rdf:RDF   Page object   rdf:RDF xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns#  xmlns:fedora= info:fedora/fedora-system:def/relations-external#  xmlns:fedora-model= info:fedora/fedora-system:def/model#  xmlns:islandora= http://islandora.ca/ontology/relsext# \n   rdf:Description rdf:about= info:fedora/yul:336779 \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:pageCModel /fedora-model:hasModel \n     islandora:hasLanguage fra /islandora:hasLanguage \n     islandora:isPageOf rdf:resource= info:fedora/yul:336566 /islandora:isPageOf \n     islandora:isSequenceNumber 213 /islandora:isSequenceNumber \n     islandora:isPageNumber 213 /islandora:isPageNumber \n     islandora:isSection 1 /islandora:isSection \n     fedora:isMemberOf rdf:resource= info:fedora/yul:336566 /fedora:isMemberOf \n     islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:336566 /islandora:inheritXacmlFrom \n   /rdf:Description  /rdf:RDF   Compound object (child)   rdf:RDF xmlns:fedora= info:fedora/fedora-system:def/relations-external#  xmlns:fedora-model= info:fedora/fedora-system:def/model#  xmlns:islandora= http://islandora.ca/ontology/relsext#  xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# \n   rdf:Description rdf:about= info:fedora/yul:271117 \n     fedora:isMemberOfCollection rdf:resource= info:fedora/yul:F0375 /fedora:isMemberOfCollection \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:sp_large_image_cmodel /fedora-model:hasModel \n     islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:F0375 /islandora:inheritXacmlFrom \n     fedora:isConstituentOf rdf:resource= info:fedora/yul:271119 /fedora:isConstituentOf \n     islandora:isSequenceNumberOfyul_271119 1 /islandora:isSequenceNumberOfyul_271119 \n   /rdf:Description  /rdf:RDF   Newspaper object   rdf:RDF \n   rdf:Description rdf:about= info:fedora/uofm:1243378 \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperCModel / \n     fedora:isMemberOfCollection rdf:resource= info:fedora/uofm:libraries / \n   /rdf:Description  /rdf:RDF   Newspaper issue object   rdf:RDF \n   rdf:Description rdf:about= info:fedora/uofm:1351347 \n     fedora:isMemberOf rdf:resource= info:fedora/uofm:1243378 / \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperIssueCModel / \n     islandora:dateIssued 1945-10-31 /islandora:dateIssued \n     islandora:isSequenceNumber 2023 /islandora:isSequenceNumber \n   /rdf:Description  /rdf:RDF   Newspaper page object   rdf:RDF \n   rdf:Description rdf:about= info:fedora/uofm:1351348 \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperPageCModel / \n     fedora:isMemberOf rdf:resource= info:fedora/uofm:1351347 / \n     islandora:isPageOf rdf:resource= info:fedora/uofm:1351347 / \n     islandora:isSequenceNumber 1 /islandora:isSequenceNumber \n     islandora:isPageNumber 1 /islandora:isPageNumber \n   /rdf:Description  /rdf:RDF", 
            "title": "fcrepo3 RELS-EXT to fcrepo4 Mapping"
        }, 
        {
            "location": "/migration/migration/#audit-log-migration", 
            "text": "auditTrail mapping     fcrepo3 event  fcrepo4 Event Type      addDatastream  premis:ing\u2021    modifyDatastreamByReference  audit:contentModification/metadataModification\u2021    modifyObject  audit:resourceModification\u2021    modifyObject (checksum validation)  premis:validation\u2021    modifyDatastreamByValue  audit:contentModification/metadataModification\u2021    purgeDatastream  audit:contentRemoval\u2021     \u2020 The  fedora3model  namespace is not a published namespace. It is a representation of the fcrepo3 namespace  info:fedora/fedora-system:def/model .  \n\u2021 Not yet implemented  Examples :  addDatastream  audit:record ID= AUDREC1  audit:process type= Fedora API-M /  audit:action addDatastream /audit:action  audit:componentID TECHMD_FITS /audit:componentID  audit:responsibility joanna /audit:responsibility  audit:date 2013-06-21T14:54:27.396Z /audit:date  audit:justification Copied datastream from yul:61282. /audit:justification  /audit:record   modifyDatastreamByReference  audit:record ID= AUDREC4  audit:process type= Fedora API-M /  audit:action modifyDatastreamByReference /audit:action  audit:componentID TN /audit:componentID  audit:responsibility fedoraAdmin /audit:responsibility  audit:date 2013-06-22T05:14:34.443Z /audit:date  audit:justification /audit:justification  /audit:record   modifyObject  audit:record ID= AUDREC5  audit:process type= Fedora API-M /  audit:action modifyObject /audit:action  audit:componentID /audit:componentID  audit:responsibility joanna /audit:responsibility  audit:date 2013-07-02T14:31:59.699Z /audit:date  audit:justification /audit:justification  /audit:record   modifyObject (checksum validation)  audit:record ID= AUDREC23  audit:process type= Fedora API-M /  audit:action modifyObject /audit:action  audit:componentID /audit:componentID  audit:responsibility anonymous /audit:responsibility  audit:date 2014-01-22T21:07:43.502Z /audit:date  audit:justification PREMIS:file=yul:96031+FULL_TEXT+FULL_TEXT.0; PREMIS:eventType=fixity check; PREMIS:eventOutcome=SHA-1 checksum validated. /audit:justification  /audit:record   modifyDatastreamByValue  audit:record ID= AUDREC16  audit:process type= Fedora API-M /  audit:action modifyDatastreamByValue /audit:action  audit:componentID RELS-EXT /audit:componentID  audit:responsibility nruest /audit:responsibility  audit:date 2013-11-27T15:42:08.823Z /audit:date  audit:justification /audit:justification  /audit:record   purgeDatastream  audit:record ID= AUDREC15  audit:process type= Fedora API-M /  audit:action purgeDatastream /audit:action  audit:componentID MKV /audit:componentID  audit:responsibility fedoraAdmin /audit:responsibility  audit:date 2015-04-08T14:37:54.963Z /audit:date  audit:justification Purged datastream (ID=MKV), versions ranging from the beginning of time to the end of time.  This resulted in the permanent removal of 1 datastream version(s) (2015-02-19T21:01:56.235Z) and all associated audit records. /audit:justification", 
            "title": "Audit log migration"
        }, 
        {
            "location": "/migration/migration/#diagrams", 
            "text": "Example Islandora (Large Image Object), PCDM, and Fedora 4 structure", 
            "title": "Diagrams"
        }, 
        {
            "location": "/pdx/README/", 
            "text": "PDX\n\n\n8.x-1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is a top level container for the various PCDM related Islandora CLAW microservices. It allows you to mount the various endpoints at one port on one machine and makes a development vagrant/docker configuration easier to produce.\n\n\nRequirements\n\n\n\n\nPHP 5.5+\n\n\nComposer\n\n\nChullo\n\n\nCrayfish\n\n\nFedora 4\n\n\nA triplestore (i.e. \nBlazegraph\n, \nFuseki\n, etc)\n\n\n\n\nInstallation\n\n\nYou will need to copy the configuration file \nexample.settings.yml\n to either \nsettings.yml\n or \nsettings.dev.yml\n (if $app['debug'] = TRUE) and change any required settings.\n\n\nYou can run just this service using PHP by executing\n\n\nphp -S localhost:\nsome port\n -t src/ src/index.php\n\n\n\n\nfrom this directory to start it running.\n\n\nServices\n\n\nThis mounts all the various individual microservices under the \n/islandora\n URL, so you currently have access to\n\n\n\n\nCollectionService at \n/islandora/collection\n\n\n\n\nSee the individual services for more information on their endpoints.\n\n\nCollectionService\n\n\nThis an Islandora PHP Microservice to create PCDM:Collections and add/remove PCDM:Objects to a PCDM:Collection.\n\n\nServices\n\n\nThe CollectionService provides the following endpoints for HTTP requests.\n\n\nNote\n: The UUID is of the form \n18c67794-366c-a6d9-af13-b3464a1fb9b5\n\n\n\n\n\n\nPOST to \n/collection\n\n\nfor creating a new PCDM:Collection at the root level\n\n\n\n\n\n\nPOST to \n/collection/{uuid}\n\n\nfor creating a new PCDM:Collection as a child of resource {uuid}\n\n\n\n\n\n\nPOST to \n/collection/{uuid}/member/{member}\n\n\nfor adding the resource identifier by the UUID {member} to the collection identified by the UUID {uuid}\n\n\n\n\n\n\nDELETE to \n/collection/{uuid}/member/{member}\n\n\nfor removing the resource identifier by the UUID {member} from the collection identified by the UUID {uuid}\n\n\n\n\n\n\nSponsors\n\n\n\n\nUPEI\n\n\ndiscoverygarden inc.\n\n\nLYRASIS\n\n\nMcMaster University\n\n\nUniversity of Limerick\n\n\nYork University\n\n\nUniversity of Manitoba\n\n\nSimon Fraser University\n\n\nPALS\n\n\nAmerican Philosophical Society\n\n\ncommon media inc.\n\n\n\n\nMaintainers\n\n\n\n\nJared Whiklo\n\n\nDiego Pino\n\n\nNick Ruest\n\n\n\n\nLicense\n\n\nMIT", 
            "title": "README"
        }, 
        {
            "location": "/pdx/README/#pdx", 
            "text": "", 
            "title": "PDX"
        }, 
        {
            "location": "/pdx/README/#8x-10", 
            "text": "This is a top level container for the various PCDM related Islandora CLAW microservices. It allows you to mount the various endpoints at one port on one machine and makes a development vagrant/docker configuration easier to produce.", 
            "title": "8.x-1.0"
        }, 
        {
            "location": "/pdx/README/#requirements", 
            "text": "PHP 5.5+  Composer  Chullo  Crayfish  Fedora 4  A triplestore (i.e.  Blazegraph ,  Fuseki , etc)", 
            "title": "Requirements"
        }, 
        {
            "location": "/pdx/README/#installation", 
            "text": "You will need to copy the configuration file  example.settings.yml  to either  settings.yml  or  settings.dev.yml  (if $app['debug'] = TRUE) and change any required settings.  You can run just this service using PHP by executing  php -S localhost: some port  -t src/ src/index.php  from this directory to start it running.", 
            "title": "Installation"
        }, 
        {
            "location": "/pdx/README/#services", 
            "text": "This mounts all the various individual microservices under the  /islandora  URL, so you currently have access to   CollectionService at  /islandora/collection   See the individual services for more information on their endpoints.", 
            "title": "Services"
        }, 
        {
            "location": "/pdx/README/#collectionservice", 
            "text": "This an Islandora PHP Microservice to create PCDM:Collections and add/remove PCDM:Objects to a PCDM:Collection.", 
            "title": "CollectionService"
        }, 
        {
            "location": "/pdx/README/#services_1", 
            "text": "The CollectionService provides the following endpoints for HTTP requests.  Note : The UUID is of the form  18c67794-366c-a6d9-af13-b3464a1fb9b5    POST to  /collection  for creating a new PCDM:Collection at the root level    POST to  /collection/{uuid}  for creating a new PCDM:Collection as a child of resource {uuid}    POST to  /collection/{uuid}/member/{member}  for adding the resource identifier by the UUID {member} to the collection identified by the UUID {uuid}    DELETE to  /collection/{uuid}/member/{member}  for removing the resource identifier by the UUID {member} from the collection identified by the UUID {uuid}", 
            "title": "Services"
        }, 
        {
            "location": "/pdx/README/#sponsors", 
            "text": "UPEI  discoverygarden inc.  LYRASIS  McMaster University  University of Limerick  York University  University of Manitoba  Simon Fraser University  PALS  American Philosophical Society  common media inc.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/pdx/README/#maintainers", 
            "text": "Jared Whiklo  Diego Pino  Nick Ruest", 
            "title": "Maintainers"
        }, 
        {
            "location": "/pdx/README/#license", 
            "text": "MIT", 
            "title": "License"
        }, 
        {
            "location": "/technical-documentation/architecture/", 
            "text": "Architecture\n\n\nOverview\n\n\nIslandora 7.x-2.x is a large and comprehensive technology stack that encompasses a Fedora 4 repository, a Drupal CMS, and an Apache Camel based middleware layer to integrate the two along with all of the other complementary technologies required for digital asset management and preservation (full text search engine, triplestore, command line tools, etc...).  Here is a (somewhat) exhaustive list of the technologies in an Islandora stack:\n\n\n\n\nFedora 4 (deployed in a servlet container such as Tomcat or Jetty)\n\n\nDrupal 7 (deployed in an Apache 2 web server), which includes:\n\n\nA relational database such as MySQL or PostgreSQL\n\n\nSeveral third-party Drupal modules from drupal.org\n\n\nSeveral Islandora Drupal modules\n\n\nSeveral JavaScript viewers for rendering content (PDF.js, Video.js, etc...)\n\n\n\n\n\n\nApache Solr (deployed in either an OSGi or servlet container)\n\n\nBlazegraph (or the triple store of your choice, most likely deployed in a servlet container)\n\n\nApache Camel based middleware (all deployed in an OSGi container), which includes:\n\n\nIslandora Sync - Asynchronous and event driven software to generate derivatives and align Drupal fields with Fedora RDF\n\n\nIslandora Services - RESTful web services exposed through the OSGi container that accept Drupal information and manipulate Fedora resources\n\n\nFedora Messaging Application Toolbox - Indexes Fedora content in the triplestore\n\n\n\n\n\n\nIslandora Commands - A command-line PHP script utilized by Services and Sync to provide processing capabilities beyond what can be done in a Blueprint XML file\n\n\nSeveral command line tools for derivative generation:\n\n\nImageMagick - For image manipulation\n\n\nTesseract - For OCR generation\n\n\nFFmpeg - For video processing\n\n\nLAME - For audio processing\n\n\nFITS - For technical metadata generation\n\n\nand much much more as functionality requires...\n\n\n\n\n\n\n\n\nHere's an image representing the various components of the stack and how they interoperate:\n\n\nScalability\n\n\nOne of the main goals with the 7.x-2.x project is to allow for horizontal scalability, and the architecture of the stack has been designed with this in mind.  No assumptions are made requiring any of the components to be on the same machine, so it can all be split apart onto multiple resources.  Most of the components also provide some sort of horizontal scalability through sharding, replication, or both.  If desired, the following components can be clustered through configuration and their respective installation procedures:\n\n\n\n\nFedora 4\n\n\nFedora 4 sits on top of Modeshape, which provides both replication and sharding capabilities.  See https://docs.jboss.org/author/display/MODE/Clustering\n\n\n\n\n\n\nApache Solr\n\n\nSolr indices can be sharded to allow for distributed searching. See https://cwiki.apache.org/confluence/display/solr/Distributed+Search+with+Index+Sharding\n\n\n\n\n\n\nBlazegraph\n\n\nBlazegraph was chosen as the \u2018default\u2019 triplestore for Islandora because it is well known to provide both sharding and replication capabilities.  See https://wiki.blazegraph.com/wiki/index.php/HAJournalServer and  https://wiki.blazegraph.com/wiki/index.php/ClusterSetupGuide\n\n\n\n\n\n\nDrupal\n\n\nThe Drupal front end can be scaled out by having multiple Apache webservers behind a load balancer\n\n\nScaling the relational database (while difficult) is possible, though typical vertical scaling is the first approach taken\n\n\n\n\n\n\n\n\nWhile not yet implemented, it will be possible to scale the Camel based middleware both the web services and the sync based listeners through the use of Camel's load balancer design pattern. See https://camel.apache.org/load-balancer.html", 
            "title": "Architecture"
        }, 
        {
            "location": "/technical-documentation/architecture/#architecture", 
            "text": "", 
            "title": "Architecture"
        }, 
        {
            "location": "/technical-documentation/architecture/#overview", 
            "text": "Islandora 7.x-2.x is a large and comprehensive technology stack that encompasses a Fedora 4 repository, a Drupal CMS, and an Apache Camel based middleware layer to integrate the two along with all of the other complementary technologies required for digital asset management and preservation (full text search engine, triplestore, command line tools, etc...).  Here is a (somewhat) exhaustive list of the technologies in an Islandora stack:   Fedora 4 (deployed in a servlet container such as Tomcat or Jetty)  Drupal 7 (deployed in an Apache 2 web server), which includes:  A relational database such as MySQL or PostgreSQL  Several third-party Drupal modules from drupal.org  Several Islandora Drupal modules  Several JavaScript viewers for rendering content (PDF.js, Video.js, etc...)    Apache Solr (deployed in either an OSGi or servlet container)  Blazegraph (or the triple store of your choice, most likely deployed in a servlet container)  Apache Camel based middleware (all deployed in an OSGi container), which includes:  Islandora Sync - Asynchronous and event driven software to generate derivatives and align Drupal fields with Fedora RDF  Islandora Services - RESTful web services exposed through the OSGi container that accept Drupal information and manipulate Fedora resources  Fedora Messaging Application Toolbox - Indexes Fedora content in the triplestore    Islandora Commands - A command-line PHP script utilized by Services and Sync to provide processing capabilities beyond what can be done in a Blueprint XML file  Several command line tools for derivative generation:  ImageMagick - For image manipulation  Tesseract - For OCR generation  FFmpeg - For video processing  LAME - For audio processing  FITS - For technical metadata generation  and much much more as functionality requires...     Here's an image representing the various components of the stack and how they interoperate:", 
            "title": "Overview"
        }, 
        {
            "location": "/technical-documentation/architecture/#scalability", 
            "text": "One of the main goals with the 7.x-2.x project is to allow for horizontal scalability, and the architecture of the stack has been designed with this in mind.  No assumptions are made requiring any of the components to be on the same machine, so it can all be split apart onto multiple resources.  Most of the components also provide some sort of horizontal scalability through sharding, replication, or both.  If desired, the following components can be clustered through configuration and their respective installation procedures:   Fedora 4  Fedora 4 sits on top of Modeshape, which provides both replication and sharding capabilities.  See https://docs.jboss.org/author/display/MODE/Clustering    Apache Solr  Solr indices can be sharded to allow for distributed searching. See https://cwiki.apache.org/confluence/display/solr/Distributed+Search+with+Index+Sharding    Blazegraph  Blazegraph was chosen as the \u2018default\u2019 triplestore for Islandora because it is well known to provide both sharding and replication capabilities.  See https://wiki.blazegraph.com/wiki/index.php/HAJournalServer and  https://wiki.blazegraph.com/wiki/index.php/ClusterSetupGuide    Drupal  The Drupal front end can be scaled out by having multiple Apache webservers behind a load balancer  Scaling the relational database (while difficult) is possible, though typical vertical scaling is the first approach taken     While not yet implemented, it will be possible to scale the Camel based middleware both the web services and the sync based listeners through the use of Camel's load balancer design pattern. See https://camel.apache.org/load-balancer.html", 
            "title": "Scalability"
        }, 
        {
            "location": "/technical-documentation/commands/", 
            "text": "Islandora Commands\n\n\nIntroduction\n\n\nSometimes you need to do deeper logic in a Camel route than can realistically be done within a Blueprint XML. Since Apache Camel is an \nintegration\n framework, we can call out to command line PHP instead of having to use Java for the majority of our tasks. Though Java is still always an option to those who are inclined (and may be required for more advanced use cases), there are many advantages to sticking with PHP. Not only is it the language we're most comfortable with as a community, but its also well suited for dealing with both JSON-LD from Fedora and node content from Drupal (much more so than Java). We also get the full advantages of modern PHP, including object oriented programming and tools like Composer. \n\n\nBasic Usage\n\n\nIn your git project's root, head on over to the \nbin\n folder of the \ncamel/commands\n directory and execute the \nislandora.php\n script to see what it has to say.\n\n\nvagrant@islandora:~/islandora$ cd camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.\n\n\n\n\nWow, that's a lot. How did we get all that nice output? It's because we're using the Symfony Console component as a framework for our script. We get all kinds of stuff for free because of it, including versioning, exception catching, and this helpful message.\n\n\nAs you can see, this tool expects a command to be provided. Notice that the commands are even namespaced! Normally, commands would accept arguments and parameters optionally after the command. But from Camel, message bodies are piped to the tool using STDIN, which the tool will gladly accept. Let's try running a command that will convert a node represented in JSON from Drupal into a SPARQL update query. First, we'll save the input to a file so that when we run the command we can just dump its contents into STDIN to emulate how Camel behaves. Go find a node on your site and get its UUID by looking at its devel tab. \n\n\nPUT PICTURE OF DEVEL TAB HERE\n\n\nYou can get its JSON representation by visiting \nhttp://yoursite/islandora/node/your_nodes_uuid\n. If you're running on the vagrant environment, and have a uuid of 38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0, then the url would look like \nlocalhost:8000/islandora/node/38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0\n.\n\n\nPUT A PICTURE OF THE JSON OUTPUT HERE\n\n\nSave the response somewhere, like \n/tmp/node.json\n. Then you can run the command like so:\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ cat /tmp/node.json | php islandora.php collectionService:nodeToSparql\nPREFIX islandora: \nhttp://islandora.ca/ontology/v2/\n\nPREFIX rdf: \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\nPREFIX fedora: \nhttp://fedora.info/definitions/v4/repository#\n\nPREFIX pcdm: \nhttp://pcdm.org/models#\n\nPREFIX nfo: \nhttp://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/\n\nPREFIX nt: \nhttp://www.jcp.org/jcr/nt/1.0\n\nPREFIX mix: \nhttp://www.jcp.org/jcr/mix/1.0\n\nPREFIX ldp: \nhttp://www.w3.org/ns/ldp#\n\nPREFIX dc11: \nhttp://purl.org/dc/elements/1.1/\n\nPREFIX modsrdf: \nhttp://www.loc.gov/mods/modsrdf/v1#\n\nPREFIX content: \nhttp://purl.org/rss/1.0/modules/content/\n\nPREFIX dc: \nhttp://purl.org/dc/terms/\n\nPREFIX foaf: \nhttp://xmlns.com/foaf/0.1/\n\nPREFIX og: \nhttp://ogp.me/ns#\n\nPREFIX rdfs: \nhttp://www.w3.org/2000/01/rdf-schema#\n\nPREFIX sioc: \nhttp://rdfs.org/sioc/ns#\n\nPREFIX sioct: \nhttp://rdfs.org/sioc/types#\n\nPREFIX skos: \nhttp://www.w3.org/2004/02/skos/core#\n\nPREFIX xsd: \nhttp://www.w3.org/2001/XMLSchema#\n\n\nDELETE WHERE {\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n ?o0 .\n  \n \nhttp://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/uuid\n ?o1 .\n  \n \nhttp://purl.org/dc/terms/title\n ?o2 .\n  \n \nhttp://purl.org/dc/terms/date\n ?o3 .\n  \n \nhttp://purl.org/dc/terms/created\n ?o4 .\n  \n \nhttp://purl.org/dc/terms/modified\n ?o5 .\n  \n \nhttp://rdfs.org/sioc/ns#has_creator\n ?o6 .\n  \n \nhttp://xmlns.com/foaf/0.1/name\n ?o7 .\n};\nINSERT DATA {\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.w3.org/ns/ldp#RDFSource\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.w3.org/ns/ldp#Container\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.jcp.org/jcr/nt/1.0hierarchyNode\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.jcp.org/jcr/nt/1.0folder\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.jcp.org/jcr/nt/1.0base\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.jcp.org/jcr/mix/1.0referenceable\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://fedora.info/definitions/v4/repository#Resource\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://fedora.info/definitions/v4/repository#Container\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://pcdm.org/models#Collection\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://islandora.ca/ontology/v2/collection\n .\n  \n \nhttp://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/uuid\n \n38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0\n .\n  \n \nhttp://purl.org/dc/terms/title\n \nTest Collection\n .\n  \n \nhttp://purl.org/dc/terms/date\n \n1970-01-01T00:33:35+00:00\n^^\nhttp://www.w3.org/2001/XMLSchema#dateTime\n .\n  \n \nhttp://purl.org/dc/terms/created\n \n1970-01-01T00:33:35+00:00\n^^\nhttp://www.w3.org/2001/XMLSchema#dateTime\n .\n  \n \nhttp://purl.org/dc/terms/modified\n \n2015-07-16T13:49:27+00:00\n^^\nhttp://www.w3.org/2001/XMLSchema#dateTime\n .\n  \n \nhttp://rdfs.org/sioc/ns#has_creator\n 1 .\n  \n \nhttp://xmlns.com/foaf/0.1/name\n \nadmin\n .\n}\n\n\n\n\nAnd you can see that we have our SPARQL output. Executing commands like this is a great way to test without having to trigger anything via Camel.\n\n\nIf you are within a Camel route in the Blueprint DSL, the message body is automatically provided to the command, and you can utilize the Islandora component to execute one like so:\n\n\nto uri=\nislandora:namespace:command\n/\n\n\n\n\n\nFor example, in order to run the same command we just did from inside Camel, you can simply do this (assuming the message body is the same JSON data from Drupal services):\n\n\nto uri=\nislandora:collectionService:nodeToSparql\n/\n\n\n\n\n\nSee the documentation on the Islandora command for more information about using a command from within Camel.\n\n\nCreating a new Command\n\n\nLet's go through the steps required to make your own Camel command. As is tradition, we're going to make a simple \"Hello World\" command.\n\n\nAll that's required for creating a command is to extend IslandoraCommand (or one of its subclasses). It already handles everything for you, including accepting input from STDIN. The bare minimum that is required of an IslandoraCommand is to implement two methods: \nconfigure()\n and \nexecute(InputInterface $input, OutputInterface $output)\n. From your project's root, create the \ncamel/commands/src/Greeter\n directory and open up a new file called \nHelloGreeter.php\n. Place the following code inside and be sure to save it to the newly created \nGreeter\n directory.\n\n\n\n\n?php\n\n/**\n * This file is part of Islandora.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * PHP Version 5.5.9\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name \nyour_email@your_employer.com\n\n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\n\nuse Islandora\\IslandoraCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Says hello!\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name \nyour_email@your_employer.com\n\n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\nclass HelloGreeter extends IslandoraCommand\n{\n  /**\n   * Sets command configuration.\n   *\n   * @return null\n   */\n  protected function configure()\n  {\n    $this-\nsetName('greeter:hello')\n      -\nsetDescription(\n        \nSays hello!\n\n      );\n  }\n\n  /**\n   * Says hello!\n   *\n   * @param InputInterface $input An InputInterface instance\n   * @param OutputInterface $output An OutputInterface instance\n   *\n   * @return null\n   */\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $name = $this-\ndata;\n    $output-\nwriteln(\nHello \n . trim($name) . \n!\n);\n  }\n}\n\n\n\n\nIn the \nconfigure()\n method, we set some properties for the command. A command's setters all return the command itself, so we can chain the calls together. We set the name of the command, complete with namespace and ':' delimiter. We also give a description of the command that will show up when listing available commands.\n\n\nThe \nexecute(InputInterface $input, OutputInterface $output)\n method is where we do our actual work. Since we extended Islandora command, all input from STDIN is provided as a String and can be accessed any time through \n$this-\ndata\n.\n\n\nSo let's try it out! Go back to the \ncamel/commands/bin\n directory and get a listing of all the commands to make sure it appears.\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ cd ~/islandora/camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n greeter:hello          Says hello!\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.\n\n\n\n\nAnd sure enough, it does! We now have the \ngreeter:hello\n command from the \ngreeter\n namespace! Let's use it! As is tradition, we're going to greet the world.\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ echo \nWorld\n | php islandora.php greeter:hello\nHello World!\n\n\n\n\nWorking with JSON data\n\n\nMost of the time, we're dealing with JSON output. Often, we're working with node data from Drupal or ld+json RDF from Fedora 4. As a convienence, the JsonInputIslandoraCommand can be extended instead of IslandoraCommand. With a JsonInputIslandoraCommand, \n$this-\ndata\n is an associative array that is automatically parsed from JSON input through STDIN. Let's trying writing another Greeter, only this time it will accept JSON input of the form \n{\"name\": \"some_name\"}\n.\n\n\n?php\n\n/**\n * This file is part of Islandora.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * PHP Version 5.5.9\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name \nyour_email@your_employer.com\n\n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\n\nuse Islandora\\JsonInputIslandoraCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Says hello! Accepts JSON data in the form {\nname\n : \nyour_name\n}.\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name \nyour_email@your_employer.com\n\n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\nclass JsonHelloGreeter extends JsonInputIslandoraCommand\n{\n  /**\n   * Sets command configuration.\n   *\n   * @return null\n   */\n  protected function configure()\n  {\n    $this-\nsetName('greeter:helloUsingJson')\n      -\nsetDescription(\n        'Says hello! Accepts JSON data in the form {\nname\n : \nyour_name\n}.'\n      );\n  }\n\n  /**\n   * Says hello! Accepts JSON data in the form {\nname\n : \nyour_name\n}.\n   *\n   * @param InputInterface $input An InputInterface instance\n   * @param OutputInterface $output An OutputInterface instance\n   *\n   * @return null\n   */\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $name = $this-\ndata['name'];\n    $output-\nwriteln(\nHello \n . trim($name) . \n!\n);\n  }\n}\n\n\n\n\nThis command is almost exactly the same as the last, except it extends JsonInputIslandoraCommand and its execute function pulls the name of the person to greet out of \n$this-\ndata\n using the key 'name'.\n\n\nLet's make sure the command is available.\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n greeter:hello          Says hello!\n greeter:helloUsingJson     Says hello! Accepts JSON data in the form {\nname\n : \nyour_name\n}.\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.\n\n\n\n\nOnce you've confirmed that \ngreeter:helloUsingJson\n is available, you can run it using:\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ echo '{\nname\n : \nWorld\n}' | php islandora.php greeter:helloUsingJson\nHello World!\n\n\n\n\nAnd there you have it! That's how you can create your own commands for use in Camel routes, and also how to experiment with them outside of Camel! Remember, when experimenting with more complicated data, you'll probably want to pipe the contents of a file to the command like we did above.", 
            "title": "Commands"
        }, 
        {
            "location": "/technical-documentation/commands/#islandora-commands", 
            "text": "", 
            "title": "Islandora Commands"
        }, 
        {
            "location": "/technical-documentation/commands/#introduction", 
            "text": "Sometimes you need to do deeper logic in a Camel route than can realistically be done within a Blueprint XML. Since Apache Camel is an  integration  framework, we can call out to command line PHP instead of having to use Java for the majority of our tasks. Though Java is still always an option to those who are inclined (and may be required for more advanced use cases), there are many advantages to sticking with PHP. Not only is it the language we're most comfortable with as a community, but its also well suited for dealing with both JSON-LD from Fedora and node content from Drupal (much more so than Java). We also get the full advantages of modern PHP, including object oriented programming and tools like Composer.", 
            "title": "Introduction"
        }, 
        {
            "location": "/technical-documentation/commands/#basic-usage", 
            "text": "In your git project's root, head on over to the  bin  folder of the  camel/commands  directory and execute the  islandora.php  script to see what it has to say.  vagrant@islandora:~/islandora$ cd camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.  Wow, that's a lot. How did we get all that nice output? It's because we're using the Symfony Console component as a framework for our script. We get all kinds of stuff for free because of it, including versioning, exception catching, and this helpful message.  As you can see, this tool expects a command to be provided. Notice that the commands are even namespaced! Normally, commands would accept arguments and parameters optionally after the command. But from Camel, message bodies are piped to the tool using STDIN, which the tool will gladly accept. Let's try running a command that will convert a node represented in JSON from Drupal into a SPARQL update query. First, we'll save the input to a file so that when we run the command we can just dump its contents into STDIN to emulate how Camel behaves. Go find a node on your site and get its UUID by looking at its devel tab.   PUT PICTURE OF DEVEL TAB HERE  You can get its JSON representation by visiting  http://yoursite/islandora/node/your_nodes_uuid . If you're running on the vagrant environment, and have a uuid of 38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0, then the url would look like  localhost:8000/islandora/node/38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0 .  PUT A PICTURE OF THE JSON OUTPUT HERE  Save the response somewhere, like  /tmp/node.json . Then you can run the command like so:  vagrant@islandora:~/islandora/camel/commands/bin$ cat /tmp/node.json | php islandora.php collectionService:nodeToSparql\nPREFIX islandora:  http://islandora.ca/ontology/v2/ \nPREFIX rdf:  http://www.w3.org/1999/02/22-rdf-syntax-ns# \nPREFIX fedora:  http://fedora.info/definitions/v4/repository# \nPREFIX pcdm:  http://pcdm.org/models# \nPREFIX nfo:  http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/ \nPREFIX nt:  http://www.jcp.org/jcr/nt/1.0 \nPREFIX mix:  http://www.jcp.org/jcr/mix/1.0 \nPREFIX ldp:  http://www.w3.org/ns/ldp# \nPREFIX dc11:  http://purl.org/dc/elements/1.1/ \nPREFIX modsrdf:  http://www.loc.gov/mods/modsrdf/v1# \nPREFIX content:  http://purl.org/rss/1.0/modules/content/ \nPREFIX dc:  http://purl.org/dc/terms/ \nPREFIX foaf:  http://xmlns.com/foaf/0.1/ \nPREFIX og:  http://ogp.me/ns# \nPREFIX rdfs:  http://www.w3.org/2000/01/rdf-schema# \nPREFIX sioc:  http://rdfs.org/sioc/ns# \nPREFIX sioct:  http://rdfs.org/sioc/types# \nPREFIX skos:  http://www.w3.org/2004/02/skos/core# \nPREFIX xsd:  http://www.w3.org/2001/XMLSchema# \n\nDELETE WHERE {\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type  ?o0 .\n     http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/uuid  ?o1 .\n     http://purl.org/dc/terms/title  ?o2 .\n     http://purl.org/dc/terms/date  ?o3 .\n     http://purl.org/dc/terms/created  ?o4 .\n     http://purl.org/dc/terms/modified  ?o5 .\n     http://rdfs.org/sioc/ns#has_creator  ?o6 .\n     http://xmlns.com/foaf/0.1/name  ?o7 .\n};\nINSERT DATA {\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.w3.org/ns/ldp#RDFSource  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.w3.org/ns/ldp#Container  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.jcp.org/jcr/nt/1.0hierarchyNode  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.jcp.org/jcr/nt/1.0folder  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.jcp.org/jcr/nt/1.0base  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.jcp.org/jcr/mix/1.0referenceable  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://fedora.info/definitions/v4/repository#Resource  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://fedora.info/definitions/v4/repository#Container  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://pcdm.org/models#Collection  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://islandora.ca/ontology/v2/collection  .\n     http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/uuid   38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0  .\n     http://purl.org/dc/terms/title   Test Collection  .\n     http://purl.org/dc/terms/date   1970-01-01T00:33:35+00:00 ^^ http://www.w3.org/2001/XMLSchema#dateTime  .\n     http://purl.org/dc/terms/created   1970-01-01T00:33:35+00:00 ^^ http://www.w3.org/2001/XMLSchema#dateTime  .\n     http://purl.org/dc/terms/modified   2015-07-16T13:49:27+00:00 ^^ http://www.w3.org/2001/XMLSchema#dateTime  .\n     http://rdfs.org/sioc/ns#has_creator  1 .\n     http://xmlns.com/foaf/0.1/name   admin  .\n}  And you can see that we have our SPARQL output. Executing commands like this is a great way to test without having to trigger anything via Camel.  If you are within a Camel route in the Blueprint DSL, the message body is automatically provided to the command, and you can utilize the Islandora component to execute one like so:  to uri= islandora:namespace:command /   For example, in order to run the same command we just did from inside Camel, you can simply do this (assuming the message body is the same JSON data from Drupal services):  to uri= islandora:collectionService:nodeToSparql /   See the documentation on the Islandora command for more information about using a command from within Camel.", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/technical-documentation/commands/#creating-a-new-command", 
            "text": "Let's go through the steps required to make your own Camel command. As is tradition, we're going to make a simple \"Hello World\" command.  All that's required for creating a command is to extend IslandoraCommand (or one of its subclasses). It already handles everything for you, including accepting input from STDIN. The bare minimum that is required of an IslandoraCommand is to implement two methods:  configure()  and  execute(InputInterface $input, OutputInterface $output) . From your project's root, create the  camel/commands/src/Greeter  directory and open up a new file called  HelloGreeter.php . Place the following code inside and be sure to save it to the newly created  Greeter  directory.   ?php\n\n/**\n * This file is part of Islandora.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * PHP Version 5.5.9\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name  your_email@your_employer.com \n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\n\nuse Islandora\\IslandoraCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Says hello!\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name  your_email@your_employer.com \n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\nclass HelloGreeter extends IslandoraCommand\n{\n  /**\n   * Sets command configuration.\n   *\n   * @return null\n   */\n  protected function configure()\n  {\n    $this- setName('greeter:hello')\n      - setDescription(\n         Says hello! \n      );\n  }\n\n  /**\n   * Says hello!\n   *\n   * @param InputInterface $input An InputInterface instance\n   * @param OutputInterface $output An OutputInterface instance\n   *\n   * @return null\n   */\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $name = $this- data;\n    $output- writeln( Hello   . trim($name) .  ! );\n  }\n}  In the  configure()  method, we set some properties for the command. A command's setters all return the command itself, so we can chain the calls together. We set the name of the command, complete with namespace and ':' delimiter. We also give a description of the command that will show up when listing available commands.  The  execute(InputInterface $input, OutputInterface $output)  method is where we do our actual work. Since we extended Islandora command, all input from STDIN is provided as a String and can be accessed any time through  $this- data .  So let's try it out! Go back to the  camel/commands/bin  directory and get a listing of all the commands to make sure it appears.  vagrant@islandora:~/islandora/camel/commands/bin$ cd ~/islandora/camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n greeter:hello          Says hello!\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.  And sure enough, it does! We now have the  greeter:hello  command from the  greeter  namespace! Let's use it! As is tradition, we're going to greet the world.  vagrant@islandora:~/islandora/camel/commands/bin$ echo  World  | php islandora.php greeter:hello\nHello World!", 
            "title": "Creating a new Command"
        }, 
        {
            "location": "/technical-documentation/commands/#working-with-json-data", 
            "text": "Most of the time, we're dealing with JSON output. Often, we're working with node data from Drupal or ld+json RDF from Fedora 4. As a convienence, the JsonInputIslandoraCommand can be extended instead of IslandoraCommand. With a JsonInputIslandoraCommand,  $this- data  is an associative array that is automatically parsed from JSON input through STDIN. Let's trying writing another Greeter, only this time it will accept JSON input of the form  {\"name\": \"some_name\"} .  ?php\n\n/**\n * This file is part of Islandora.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * PHP Version 5.5.9\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name  your_email@your_employer.com \n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\n\nuse Islandora\\JsonInputIslandoraCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Says hello! Accepts JSON data in the form { name  :  your_name }.\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name  your_email@your_employer.com \n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\nclass JsonHelloGreeter extends JsonInputIslandoraCommand\n{\n  /**\n   * Sets command configuration.\n   *\n   * @return null\n   */\n  protected function configure()\n  {\n    $this- setName('greeter:helloUsingJson')\n      - setDescription(\n        'Says hello! Accepts JSON data in the form { name  :  your_name }.'\n      );\n  }\n\n  /**\n   * Says hello! Accepts JSON data in the form { name  :  your_name }.\n   *\n   * @param InputInterface $input An InputInterface instance\n   * @param OutputInterface $output An OutputInterface instance\n   *\n   * @return null\n   */\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $name = $this- data['name'];\n    $output- writeln( Hello   . trim($name) .  ! );\n  }\n}  This command is almost exactly the same as the last, except it extends JsonInputIslandoraCommand and its execute function pulls the name of the person to greet out of  $this- data  using the key 'name'.  Let's make sure the command is available.  vagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n greeter:hello          Says hello!\n greeter:helloUsingJson     Says hello! Accepts JSON data in the form { name  :  your_name }.\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.  Once you've confirmed that  greeter:helloUsingJson  is available, you can run it using:  vagrant@islandora:~/islandora/camel/commands/bin$ echo '{ name  :  World }' | php islandora.php greeter:helloUsingJson\nHello World!  And there you have it! That's how you can create your own commands for use in Camel routes, and also how to experiment with them outside of Camel! Remember, when experimenting with more complicated data, you'll probably want to pipe the contents of a file to the command like we did above.", 
            "title": "Working with JSON data"
        }, 
        {
            "location": "/technical-documentation/docs-build/", 
            "text": "Introduction\n\n\nThis documentation is built using \nmkdocs\n, a static site generator that is geared towards building project documentation. The documentation is created in the \nMarkdown\n format, and it all resides in the \ndocs\n directory in the repository. The organization of the documenation is controlled by the \nmkdocs.yml\n in the root of the repository.\n\n\nBuild and Deploy documentation\n\n\nDocumentation is build by running to the following command in the root of the repository:\n\n\nmkdocs build --clean\n\n\nThis command will create a static \nsite\n folder in the root of the repository. \n\n\nYou can preview any changes you have made to the documentation by running the following command:\n\n\nmkdocs serve\n\n\nAnd then visiting http://localhost:8111 in your browser.\n\n\nTo deploy documenation to GitHub Pages, issue the following command:\n\n\nmkdocs gh-deploy --clean", 
            "title": "Docs build"
        }, 
        {
            "location": "/technical-documentation/docs-build/#introduction", 
            "text": "This documentation is built using  mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the  Markdown  format, and it all resides in the  docs  directory in the repository. The organization of the documenation is controlled by the  mkdocs.yml  in the root of the repository.", 
            "title": "Introduction"
        }, 
        {
            "location": "/technical-documentation/docs-build/#build-and-deploy-documentation", 
            "text": "Documentation is build by running to the following command in the root of the repository:  mkdocs build --clean  This command will create a static  site  folder in the root of the repository.   You can preview any changes you have made to the documentation by running the following command:  mkdocs serve  And then visiting http://localhost:8111 in your browser.  To deploy documenation to GitHub Pages, issue the following command:  mkdocs gh-deploy --clean", 
            "title": "Build and Deploy documentation"
        }, 
        {
            "location": "/technical-documentation/islandora-component/", 
            "text": "The Islandora Camel Component\n\n\nIntroduction\n\n\nFrom within a Camel route, if you ever want to execute a command you\u2019ve writtin in PHP, all you need to do is use the Islandora Camel Component.  The Islandora Camel Component is a very small Camel component that mimics/wraps/extends bits of camel-exec in order to streamline the use of Camel commands.  It also is responsible for evaluating the exit status of the command and bubbling up an exceptions that may have been thrown.\n\n\nConfiguration\n\n\nBefore using the Islandora component, you need to configure it in the same Blueprint xml file that defines your Camel context.  Typically, this is the \nsrc/main/resources/OSGI-INF/blueprint/blueprint.xml\n for your particular Camel project.  The component accepts a single value: the absolute path to the \ncamel/commands/bin\n directory of your project.  It is best to set this value in the \nislandora.cfg\n as \nislandora.php.workingDir\n.\n\n\nAssuming you're using the \nislandora.cfg\n file deployed to your karaf's \netc\n directory, your Blueprint file will look something like this:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nblueprint xmlns=\nhttp://www.osgi.org/xmlns/blueprint/v1.0.0\n\n       xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n       xmlns:cm=\nhttp://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0\n\n       xsi:schemaLocation=\n\n       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\n       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\n\n\n  \n!-- Load Configuration File --\n\n  \ncm:property-placeholder persistent-id=\nislandora\n/\n\n\n  \n!-- Islandora Component Configuration --\n\n  \nbean id=\nislandora\n class=\nca.islandora.camel.component.IslandoraComponent\n\n    \nargument value=\n${islandora.php.workingDir}\n/\n\n  \n/bean\n\n\n  \ncamelContext id=\nyour_context_id\n xmlns=\nhttp://camel.apache.org/schema/blueprint\n\n    \n-- Your routes go here... --\n\n  \n/camelContext\n\n\n\n/blueprint\n\n\n\n\n\nUsage\n\n\nOnce configured, you can use the component to execute any IslandoraCommand in PHP within your camel routes.  General usage is:\n\n\nto uri=\nislandora:namespace:command\n/\n\n\n\n\n\nYou can see a list of all available namespaces and commands at any time by going to the \ncamel/commands/bin\n directory of your project and running \nphp islandora.php\n.\n\n\nvagrant@islandora:~$ cd ~/islandora/camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n  command [options] [arguments]\n\nOptions:\n  -h, --help            Display this help message\n  -q, --quiet           Do not output any message\n  -V, --version         Display this application version\n      --ansi            Force ANSI output\n      --no-ansi         Disable ANSI output\n  -n, --no-interaction  Do not ask any interactive question\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n  help                            Displays help for a command\n  list                            Lists commands\n collectionService\n  collectionService:nodeToSparql  Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n  greeter:hello                   Says hello!\n  greeter:helloUsingJson          Says hello!  Accepts JSON data in the form {\nname\n : \nyour_name\n}.\n rdf\n  rdf:createNode                  Creates a Drupal node from Fedora RDF.\n  rdf:extractContentType          Extracts a Drupal content type from Fedora RDF.\n  rdf:updateNode                  Updates a Drupal node from Fedora RDF.\n\n\n\n\nFor example, to run the greeter example from the tutorial in the Commands documentation:\n\n\nto uri=\nislandora:greeter:hello\n/\n\n\n\n\n\nHere's a small Blueprint file that will execute the \ngreeter:hello\n command every 5 seconds and log the output.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nblueprint xmlns=\nhttp://www.osgi.org/xmlns/blueprint/v1.0.0\n\n       xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n       xmlns:cm=\nhttp://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0\n\n       xsi:schemaLocation=\n\n       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\n       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\n\n\n  \n!-- Load Configuration File --\n\n  \ncm:property-placeholder persistent-id=\nislandora\n/\n\n\n  \n!-- Islandora Component Configuration --\n\n  \nbean id=\nislandora\n class=\nca.islandora.camel.component.IslandoraComponent\n\n    \nargument value=\n${islandora.php.workingDir}\n/\n\n  \n/bean\n\n\n  \ncamelContext id=\nyour_context_id\n xmlns=\nhttp://camel.apache.org/schema/blueprint\n\n    \nroute\n\n      \nfrom uri=\ntimer:foo?period=5000\n/\n\n        \nsetBody\nconstant\nWorld\n/constant\n/setBody\n\n        \nto uri=\nislandora:greeter:hello\n/\n\n        \nlog message=\n${body}\n/\n\n    \n/route\n\n  \n/camelContext\n\n\n\n/blueprint\n\n\n\n\n\nYou can deploy this file to your karaf's \ndeploy\n directory and watch it go.  In your logs, you should see something like this:\n\n\nvagrant@islandora:~$ /opt/karaf/bin/client\nLogging in as karaf\n750 [sshd-SshClient[6107227e]-nio2-thread-1] WARN org.apache.sshd.client.keyverifier.AcceptAllServerKeyVerifier - Server at [/0.0.0.0:8101, RSA, 88:ab:a4:c9:c0:bc:53:bf:bb:f8:b3:8b:80:98:26:7d] presented unverified {} key: {}\n        __ __                  ____\n       / //_/____ __________ _/ __/\n      / ,\n  / __ `/ ___/ __ `/ /_\n     / /| |/ /_/ / /  / /_/ / __/\n    /_/ |_|\\__,_/_/   \\__,_/_/\n\n  Apache Karaf (3.0.4)\n\nHit '\ntab\n' for a list of available commands\nand '[cmd] --help' for help on a specific command.\nHit 'system:shutdown' to shutdown Karaf.\nHit '\nctrl-d\n' or type 'logout' to disconnect shell from current session.\n\nkaraf@root()\n log:tail\n2015-07-17 18:12:51,292 | INFO  | #7 - timer://foo | IslandoraProducer                | 132 - ca.islandora.camel.component.islandora-camel-component - 0.0.0.SNAPSHOT | Executing ExecCommand [args=[islandora.php, greeter:hello], executable=php, timeout=9223372036854775807, outFile=null, workingDir=/home/vagrant/islandora/camel/commands/bin, useStderrOnEmptyStdout=false]\n2015-07-17 18:12:51,681 | INFO  | #7 - timer://foo | IslandoraProducer                | 132 - ca.islandora.camel.component.islandora-camel-component - 0.0.0.SNAPSHOT | The command ExecCommand [args=[islandora.php, greeter:hello], executable=php, timeout=9223372036854775807, outFile=null, workingDir=/home/vagrant/islandora/camel/commands/bin, useStderrOnEmptyStdout=false] had exit value 0\n2015-07-17 18:12:51,682 | INFO  | #7 - timer://foo | route53                          | 109 - org.apache.camel.camel-core - 2.15.2 | Hello World!\n\n2015-07-17 18:12:56,292 | INFO  | #7 - timer://foo | IslandoraProducer                | 132 - ca.islandora.camel.component.islandora-camel-component - 0.0.0.SNAPSHOT | Executing ExecCommand [args=[islandora.php, greeter:hello], executable=php, timeout=9223372036854775807, outFile=null, workingDir=/home/vagrant/islandora/camel/commands/bin, useStderrOnEmptyStdout=false]\n2015-07-17 18:12:56,676 | INFO  | #7 - timer://foo | IslandoraProducer                | 132 - ca.islandora.camel.component.islandora-camel-component - 0.0.0.SNAPSHOT | The command ExecCommand [args=[islandora.php, greeter:hello], executable=php, timeout=9223372036854775807, outFile=null, workingDir=/home/vagrant/islandora/camel/commands/bin, useStderrOnEmptyStdout=false] had exit value 0\n2015-07-17 18:12:56,676 | INFO  | #7 - timer://foo | route53                          | 109 - org.apache.camel.camel-core - 2.15.2 | Hello World!\n\n\n\n\nErrors and Exceptions in PHP\n\n\nThe Islandora Camel component automatically handles checking the return code on the command, and will automatically bubble up any exception from PHP by throwing an IslandoraPHPException that can be handled within your Camel context.  See the section on exception handling in Camel for more information.", 
            "title": "Islandora component"
        }, 
        {
            "location": "/technical-documentation/islandora-component/#the-islandora-camel-component", 
            "text": "", 
            "title": "The Islandora Camel Component"
        }, 
        {
            "location": "/technical-documentation/islandora-component/#introduction", 
            "text": "From within a Camel route, if you ever want to execute a command you\u2019ve writtin in PHP, all you need to do is use the Islandora Camel Component.  The Islandora Camel Component is a very small Camel component that mimics/wraps/extends bits of camel-exec in order to streamline the use of Camel commands.  It also is responsible for evaluating the exit status of the command and bubbling up an exceptions that may have been thrown.", 
            "title": "Introduction"
        }, 
        {
            "location": "/technical-documentation/islandora-component/#configuration", 
            "text": "Before using the Islandora component, you need to configure it in the same Blueprint xml file that defines your Camel context.  Typically, this is the  src/main/resources/OSGI-INF/blueprint/blueprint.xml  for your particular Camel project.  The component accepts a single value: the absolute path to the  camel/commands/bin  directory of your project.  It is best to set this value in the  islandora.cfg  as  islandora.php.workingDir .  Assuming you're using the  islandora.cfg  file deployed to your karaf's  etc  directory, your Blueprint file will look something like this:  ?xml version= 1.0  encoding= UTF-8 ?  blueprint xmlns= http://www.osgi.org/xmlns/blueprint/v1.0.0 \n       xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n       xmlns:cm= http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0 \n       xsi:schemaLocation= \n       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\n       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd \n\n   !-- Load Configuration File -- \n   cm:property-placeholder persistent-id= islandora / \n\n   !-- Islandora Component Configuration -- \n   bean id= islandora  class= ca.islandora.camel.component.IslandoraComponent \n     argument value= ${islandora.php.workingDir} / \n   /bean \n\n   camelContext id= your_context_id  xmlns= http://camel.apache.org/schema/blueprint \n     -- Your routes go here... -- \n   /camelContext  /blueprint", 
            "title": "Configuration"
        }, 
        {
            "location": "/technical-documentation/islandora-component/#usage", 
            "text": "Once configured, you can use the component to execute any IslandoraCommand in PHP within your camel routes.  General usage is:  to uri= islandora:namespace:command /   You can see a list of all available namespaces and commands at any time by going to the  camel/commands/bin  directory of your project and running  php islandora.php .  vagrant@islandora:~$ cd ~/islandora/camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n  command [options] [arguments]\n\nOptions:\n  -h, --help            Display this help message\n  -q, --quiet           Do not output any message\n  -V, --version         Display this application version\n      --ansi            Force ANSI output\n      --no-ansi         Disable ANSI output\n  -n, --no-interaction  Do not ask any interactive question\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n  help                            Displays help for a command\n  list                            Lists commands\n collectionService\n  collectionService:nodeToSparql  Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n  greeter:hello                   Says hello!\n  greeter:helloUsingJson          Says hello!  Accepts JSON data in the form { name  :  your_name }.\n rdf\n  rdf:createNode                  Creates a Drupal node from Fedora RDF.\n  rdf:extractContentType          Extracts a Drupal content type from Fedora RDF.\n  rdf:updateNode                  Updates a Drupal node from Fedora RDF.  For example, to run the greeter example from the tutorial in the Commands documentation:  to uri= islandora:greeter:hello /   Here's a small Blueprint file that will execute the  greeter:hello  command every 5 seconds and log the output.  ?xml version= 1.0  encoding= UTF-8 ?  blueprint xmlns= http://www.osgi.org/xmlns/blueprint/v1.0.0 \n       xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n       xmlns:cm= http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0 \n       xsi:schemaLocation= \n       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\n       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd \n\n   !-- Load Configuration File -- \n   cm:property-placeholder persistent-id= islandora / \n\n   !-- Islandora Component Configuration -- \n   bean id= islandora  class= ca.islandora.camel.component.IslandoraComponent \n     argument value= ${islandora.php.workingDir} / \n   /bean \n\n   camelContext id= your_context_id  xmlns= http://camel.apache.org/schema/blueprint \n     route \n       from uri= timer:foo?period=5000 / \n         setBody constant World /constant /setBody \n         to uri= islandora:greeter:hello / \n         log message= ${body} / \n     /route \n   /camelContext  /blueprint   You can deploy this file to your karaf's  deploy  directory and watch it go.  In your logs, you should see something like this:  vagrant@islandora:~$ /opt/karaf/bin/client\nLogging in as karaf\n750 [sshd-SshClient[6107227e]-nio2-thread-1] WARN org.apache.sshd.client.keyverifier.AcceptAllServerKeyVerifier - Server at [/0.0.0.0:8101, RSA, 88:ab:a4:c9:c0:bc:53:bf:bb:f8:b3:8b:80:98:26:7d] presented unverified {} key: {}\n        __ __                  ____\n       / //_/____ __________ _/ __/\n      / ,   / __ `/ ___/ __ `/ /_\n     / /| |/ /_/ / /  / /_/ / __/\n    /_/ |_|\\__,_/_/   \\__,_/_/\n\n  Apache Karaf (3.0.4)\n\nHit ' tab ' for a list of available commands\nand '[cmd] --help' for help on a specific command.\nHit 'system:shutdown' to shutdown Karaf.\nHit ' ctrl-d ' or type 'logout' to disconnect shell from current session.\n\nkaraf@root()  log:tail\n2015-07-17 18:12:51,292 | INFO  | #7 - timer://foo | IslandoraProducer                | 132 - ca.islandora.camel.component.islandora-camel-component - 0.0.0.SNAPSHOT | Executing ExecCommand [args=[islandora.php, greeter:hello], executable=php, timeout=9223372036854775807, outFile=null, workingDir=/home/vagrant/islandora/camel/commands/bin, useStderrOnEmptyStdout=false]\n2015-07-17 18:12:51,681 | INFO  | #7 - timer://foo | IslandoraProducer                | 132 - ca.islandora.camel.component.islandora-camel-component - 0.0.0.SNAPSHOT | The command ExecCommand [args=[islandora.php, greeter:hello], executable=php, timeout=9223372036854775807, outFile=null, workingDir=/home/vagrant/islandora/camel/commands/bin, useStderrOnEmptyStdout=false] had exit value 0\n2015-07-17 18:12:51,682 | INFO  | #7 - timer://foo | route53                          | 109 - org.apache.camel.camel-core - 2.15.2 | Hello World!\n\n2015-07-17 18:12:56,292 | INFO  | #7 - timer://foo | IslandoraProducer                | 132 - ca.islandora.camel.component.islandora-camel-component - 0.0.0.SNAPSHOT | Executing ExecCommand [args=[islandora.php, greeter:hello], executable=php, timeout=9223372036854775807, outFile=null, workingDir=/home/vagrant/islandora/camel/commands/bin, useStderrOnEmptyStdout=false]\n2015-07-17 18:12:56,676 | INFO  | #7 - timer://foo | IslandoraProducer                | 132 - ca.islandora.camel.component.islandora-camel-component - 0.0.0.SNAPSHOT | The command ExecCommand [args=[islandora.php, greeter:hello], executable=php, timeout=9223372036854775807, outFile=null, workingDir=/home/vagrant/islandora/camel/commands/bin, useStderrOnEmptyStdout=false] had exit value 0\n2015-07-17 18:12:56,676 | INFO  | #7 - timer://foo | route53                          | 109 - org.apache.camel.camel-core - 2.15.2 | Hello World!", 
            "title": "Usage"
        }, 
        {
            "location": "/technical-documentation/islandora-component/#errors-and-exceptions-in-php", 
            "text": "The Islandora Camel component automatically handles checking the return code on the command, and will automatically bubble up any exception from PHP by throwing an IslandoraPHPException that can be handled within your Camel context.  See the section on exception handling in Camel for more information.", 
            "title": "Errors and Exceptions in PHP"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/", 
            "text": "Transaction Service (done)\n\n\nUsed to start, commit, and rollback transactions.\n\n\nEndpoint\n: http://localhost:8282/islandora/transaction/\n\n\nActions\n:\n\n\n\n\n\n\nPOST\n http://localhost:8282/islandora-services/transaction/\n\n\n\n\nCreates a transaction in fedora, returning the id of the newly made transaction\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8282/islandora-services/transaction/{tx_id}/extend\n\n\n\n\n\n\nExtends a transaction\n\n\n\n\n\n\nReturns 204 - No Content\n\n\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8282/islandora-services/transaction/{tx_id}/commit\n\n\n\n\n\n\nCommits a transaction\n\n\n\n\n\n\nReturns 204 - No Content\n\n\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8282/islandora-services/transaction/{tx_id}/rollback\n\n\n\n\n\n\nRolls back a transaction\n\n\n\n\n\n\nReturns 204 - No Content\n\n\n\n\n\n\n\n\n\n\nResource Service (done)\n\n\nExposes basic CRUD operations on repository resources identified by a UUID.\n\n\nEndpoint\n: http://localhost:8282/islandora/resource/\n\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8282/islandora/resource/{uuid}?tx={tx_id}\n\n\n\n\n\n\nReturns RDF metadata for the resource identified by the provided UUID.  Respects all headers the Fedora 4 API respects.\n\n\n\n\n\n\nOptional transaction id will ensure the returned the RDF represents the current status of the resource within said transaction.\n\n\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8282/islandora/resource/?tx={tx_id}\n\n\n\n\n\n\nCreates a resource in Fedora 4.  Respects all headers the Fedora 4 API respects.\n\n\n\n\n\n\nOptional transaction id will ensure the resource is created within said transaction.\n\n\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8282/islandora/resource/{uuid}?tx={tx_id}\n\n\n\n\n\n\nUpdates a resource in Fedora 4.  Respects all headers the Fedora 4 API respects.\n\n\n\n\n\n\nOptional transaction id will ensure the resource is updated within said transaction.\n\n\n\n\n\n\n\n\n\n\nPATCH\n http://localhost:8282/islandora/resource/{uuid}?tx={tx_id}\n\n\n\n\n\n\nApplies a SPARQL/Update query against a resource in Fedora 4.  Respects all headers the Fedora 4 API respects.\n\n\n\n\n\n\nOptional transaction id will ensure the resource is updated within said transaction.\n\n\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8282/islandora-services/resource/{uuid}?tx={tx_id}\n\n\n\n\n\n\nDeletes the resource in Fedora 4.\n\n\n\n\n\n\nOptional transaction id will ensure the resource is deleted within said transaction.\n\n\n\n\n\n\n\n\n\n\nCollection Service (Sprint 003)\n\n\nConvenience operations for pcdm:Collections in Fedora 4.\n\n\nEndpoint\n: http://localhost:8282/islandora/collection/\n\n\nActions\n:\n\n\n\n\n\n\nPOST\n http://localhost:8282/islandora/collection/?tx={tx_id}\n\n\n\n\n\n\nCreates a pcdm:Collection in Fedora 4.  Respects all headers the Fedora 4 API respects.  Creates the appropriate indirect containers, with slug \"members\", to manage the pcdm:hasMember relationship or its inverse.\n\n\n\n\n\n\nOptional transaction id will ensure the resources are created within said transaction.\n\n\n\n\n\n\n\n\n\n\nObject Service\n\n\nConvenience operations for pcdm:Objects in Fedora 4.\n\n\nEndpoint\n: http://localhost:8282/islandora/object/\n\n\nActions\n:\n\n\n\n\n\n\nPOST\n http://localhost:8282/islandora/object/?tx={tx_id}\n\n\n\n\n\n\nCreates a pcdm:Object in Fedora 4.  Respects all headers the Fedora 4 API respects.  Adds the appropriate containers to manage the pcdm:hasMember and pcdm:hasFile relationships and their inverses.\n\n\n\n\n\n\nOptional transaction id will ensure the resources are created within said transaction.\n\n\n\n\n\n\n\n\n\n\nMembership Service\n\n\nOperations to add/remove members from pcdm:Objects and pcdm:Collections.\n\n\nEndpoints\n:\n\n\nhttp://localhost:8282/islandora/object/{uuid}/members\n\n\nhttp://localhost:8282/islandora/collection/{uuid}/members\n\n\nActions\n:\n\n\nFor brevity, only one of the two endpoints is described in the following section.\n\n\n\n\n\n\nGET\n http://localhost:8282/islandora/object/{parent_uuid}/members?tx={tx_id}\n\n\n\n\n\n\nRetrieves a list of members associated with object identified by parent_uuid.\n\n\n\n\n\n\nOptional transaction id will return the state of the list of members within said transaction.\n\n\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8282/islandora/object/{parent_uuid}/members/{child_uuid}?tx={tx_id}\n\n\n\n\n\n\nAdds the resource identified by child_uuid to the object/collection identified by parent_uuid\n\n\n\n\n\n\nOptional transaction id will ensure the operation is performed within said transaction.\n\n\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8282/islandora/object/{parent_uuid}/members/{child_uuid}?tx={tx_id}\n\n\n\n\n\n\nRemoves the resource identified by child_uuid from the object/collection identified by parent_uuid\n\n\n\n\n\n\nOptional transaction id will ensure the operation is performed within said transaction.\n\n\n\n\n\n\n\n\n\n\nFile Service\n\n\nLists all files for a pcdm:Object.\n\n\nEndpoint\n:  http://localhost:8282/islandora/object/{uuid}/files\n\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8282/islandora/object/{parent_uuid}/files?tx={tx_id}\n\n\n\n\n\n\nRetrieves a list of files associated with object identified by parent_uuid.\n\n\n\n\n\n\nOptional transaction id will return the state of the list of files within said transaction.\n\n\n\n\n\n\n\n\n\n\nThumbnail Service\n\n\nCRUD operations for thumbnails\n\n\nEndpoint\n:  http://localhost:8282/islandora/object/{uuid}/thumbnail\n\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8282/islandora/object/{uuid}/thumbnail?tx={tx_id}\n\n\n\n\n\n\nRetrieves the thumbnail for the object identified by the provided uuid.  Setting the accept header to an RDF mimetype will return the RDF for the file.  Setting it to a binary mimetype will return the contents of the file.\n\n\n\n\n\n\nOptional transaction id will return the thumbnail within said transaction.\n\n\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8282/islandora/object/{uuid}/thumbnail?tx={tx_id}\n\n\n\n\n\n\nSaves the thumbnail provided in the message body to the object identified by the provided uuid.  \n\n\n\n\n\n\nOptional transaction id will save the thumbnail within said transaction.\n\n\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8282/islandora/object/{uuid}/thumbnail?tx={tx_id}\n\n\n\n\n\n\nRemoves the thumbnail for the object identified by the provided uuid.  \n\n\n\n\n\n\nOptional transaction id will delete the thumbnail within said transaction.\n\n\n\n\n\n\n\n\n\n\nPreservation Master Service\n\n\nCRUD operations for preservation masters\n\n\nEndpoint\n:  http://localhost:8282/islandora/object/{uuid}/preservationMaster\n\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8282/islandora/object/{uuid}/preservationMaster?tx={tx_id}\n\n\n\n\n\n\nRetrieves the preservation master for the object identified by the provided uuid.  Setting the accept header to an RDF mimetype will return the RDF for the file.  Setting it to a binary mimetype will return the contents of the file.\n\n\n\n\n\n\nOptional transaction id will return the file within said transaction.\n\n\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8282/islandora/object/{uuid}/preservationMaster?tx={tx_id}\n\n\n\n\n\n\nSaves the preservation master provided in the message body to the object identified by the provided uuid.  \n\n\n\n\n\n\nOptional transaction id will save the file within said transaction.\n\n\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8282/islandora/object/{uuid}/preservationMaster?tx={tx_id}\n\n\n\n\n\n\nRemoves the preservation master for the object identified by the provided uuid.  \n\n\n\n\n\n\nOptional transaction id will delete the file within said transaction.\n\n\n\n\n\n\n\n\n\n\nOriginal Document\n\n\nLives on as a Google Document located \nhere\n.", 
            "title": "Islandora middleware services api"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#transaction-service-done", 
            "text": "Used to start, commit, and rollback transactions.  Endpoint : http://localhost:8282/islandora/transaction/  Actions :    POST  http://localhost:8282/islandora-services/transaction/   Creates a transaction in fedora, returning the id of the newly made transaction     POST  http://localhost:8282/islandora-services/transaction/{tx_id}/extend    Extends a transaction    Returns 204 - No Content      POST  http://localhost:8282/islandora-services/transaction/{tx_id}/commit    Commits a transaction    Returns 204 - No Content      POST  http://localhost:8282/islandora-services/transaction/{tx_id}/rollback    Rolls back a transaction    Returns 204 - No Content", 
            "title": "Transaction Service (done)"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#resource-service-done", 
            "text": "Exposes basic CRUD operations on repository resources identified by a UUID.  Endpoint : http://localhost:8282/islandora/resource/  Actions :    GET  http://localhost:8282/islandora/resource/{uuid}?tx={tx_id}    Returns RDF metadata for the resource identified by the provided UUID.  Respects all headers the Fedora 4 API respects.    Optional transaction id will ensure the returned the RDF represents the current status of the resource within said transaction.      POST  http://localhost:8282/islandora/resource/?tx={tx_id}    Creates a resource in Fedora 4.  Respects all headers the Fedora 4 API respects.    Optional transaction id will ensure the resource is created within said transaction.      PUT  http://localhost:8282/islandora/resource/{uuid}?tx={tx_id}    Updates a resource in Fedora 4.  Respects all headers the Fedora 4 API respects.    Optional transaction id will ensure the resource is updated within said transaction.      PATCH  http://localhost:8282/islandora/resource/{uuid}?tx={tx_id}    Applies a SPARQL/Update query against a resource in Fedora 4.  Respects all headers the Fedora 4 API respects.    Optional transaction id will ensure the resource is updated within said transaction.      DELETE  http://localhost:8282/islandora-services/resource/{uuid}?tx={tx_id}    Deletes the resource in Fedora 4.    Optional transaction id will ensure the resource is deleted within said transaction.", 
            "title": "Resource Service (done)"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#collection-service-sprint-003", 
            "text": "Convenience operations for pcdm:Collections in Fedora 4.  Endpoint : http://localhost:8282/islandora/collection/  Actions :    POST  http://localhost:8282/islandora/collection/?tx={tx_id}    Creates a pcdm:Collection in Fedora 4.  Respects all headers the Fedora 4 API respects.  Creates the appropriate indirect containers, with slug \"members\", to manage the pcdm:hasMember relationship or its inverse.    Optional transaction id will ensure the resources are created within said transaction.", 
            "title": "Collection Service (Sprint 003)"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#object-service", 
            "text": "Convenience operations for pcdm:Objects in Fedora 4.  Endpoint : http://localhost:8282/islandora/object/  Actions :    POST  http://localhost:8282/islandora/object/?tx={tx_id}    Creates a pcdm:Object in Fedora 4.  Respects all headers the Fedora 4 API respects.  Adds the appropriate containers to manage the pcdm:hasMember and pcdm:hasFile relationships and their inverses.    Optional transaction id will ensure the resources are created within said transaction.", 
            "title": "Object Service"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#membership-service", 
            "text": "Operations to add/remove members from pcdm:Objects and pcdm:Collections.  Endpoints :  http://localhost:8282/islandora/object/{uuid}/members  http://localhost:8282/islandora/collection/{uuid}/members  Actions :  For brevity, only one of the two endpoints is described in the following section.    GET  http://localhost:8282/islandora/object/{parent_uuid}/members?tx={tx_id}    Retrieves a list of members associated with object identified by parent_uuid.    Optional transaction id will return the state of the list of members within said transaction.      POST  http://localhost:8282/islandora/object/{parent_uuid}/members/{child_uuid}?tx={tx_id}    Adds the resource identified by child_uuid to the object/collection identified by parent_uuid    Optional transaction id will ensure the operation is performed within said transaction.      DELETE  http://localhost:8282/islandora/object/{parent_uuid}/members/{child_uuid}?tx={tx_id}    Removes the resource identified by child_uuid from the object/collection identified by parent_uuid    Optional transaction id will ensure the operation is performed within said transaction.", 
            "title": "Membership Service"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#file-service", 
            "text": "Lists all files for a pcdm:Object.  Endpoint :  http://localhost:8282/islandora/object/{uuid}/files  Actions :    GET  http://localhost:8282/islandora/object/{parent_uuid}/files?tx={tx_id}    Retrieves a list of files associated with object identified by parent_uuid.    Optional transaction id will return the state of the list of files within said transaction.", 
            "title": "File Service"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#thumbnail-service", 
            "text": "CRUD operations for thumbnails  Endpoint :  http://localhost:8282/islandora/object/{uuid}/thumbnail  Actions :    GET  http://localhost:8282/islandora/object/{uuid}/thumbnail?tx={tx_id}    Retrieves the thumbnail for the object identified by the provided uuid.  Setting the accept header to an RDF mimetype will return the RDF for the file.  Setting it to a binary mimetype will return the contents of the file.    Optional transaction id will return the thumbnail within said transaction.      PUT  http://localhost:8282/islandora/object/{uuid}/thumbnail?tx={tx_id}    Saves the thumbnail provided in the message body to the object identified by the provided uuid.      Optional transaction id will save the thumbnail within said transaction.      DELETE  http://localhost:8282/islandora/object/{uuid}/thumbnail?tx={tx_id}    Removes the thumbnail for the object identified by the provided uuid.      Optional transaction id will delete the thumbnail within said transaction.", 
            "title": "Thumbnail Service"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#preservation-master-service", 
            "text": "CRUD operations for preservation masters  Endpoint :  http://localhost:8282/islandora/object/{uuid}/preservationMaster  Actions :    GET  http://localhost:8282/islandora/object/{uuid}/preservationMaster?tx={tx_id}    Retrieves the preservation master for the object identified by the provided uuid.  Setting the accept header to an RDF mimetype will return the RDF for the file.  Setting it to a binary mimetype will return the contents of the file.    Optional transaction id will return the file within said transaction.      PUT  http://localhost:8282/islandora/object/{uuid}/preservationMaster?tx={tx_id}    Saves the preservation master provided in the message body to the object identified by the provided uuid.      Optional transaction id will save the file within said transaction.      DELETE  http://localhost:8282/islandora/object/{uuid}/preservationMaster?tx={tx_id}    Removes the preservation master for the object identified by the provided uuid.      Optional transaction id will delete the file within said transaction.", 
            "title": "Preservation Master Service"
        }, 
        {
            "location": "/technical-documentation/islandora-middleware-services-api/#original-document", 
            "text": "Lives on as a Google Document located  here .", 
            "title": "Original Document"
        }, 
        {
            "location": "/technical-documentation/services/", 
            "text": "Middleware Services\n\n\nIslandora middleware services utilize the Fedora 4 REST API and the Drupal Services module to create an API for the majority of interactions between the two systems. The Drupal uuid will be used to identify \npcdm:Objects\n (and \npcdm:Files\n thereof) when using these services.  The breakdown of services is as follows:\n\n\n\n\nThere will be a services to provide CRUD operations for \npcdm:Collections\n, \npcdm:Objects\n and \npcdm:Files\n.\n\n\nThere will be a service to provide creational operations using zip content based on content model.  For example:\n\n\nPOST\n a zip file containing book pages Islandora Book Batch format to create an entire book object (with pages and derivatives processed asynchronously, of course).\n\n\nThere will be services per derivative type to perform operations based on the node UUID of the parent.\n\n\nPATCH\n to generate a new thumbnail for a \npcdm:Object\n.\n\n\n\n\nFor more information on PCDM, please see \nthis\n page.\n\n\nCollection Service\n\n\nUsed for manipulating \npcdm:Collections\n. Essentially wraps the Fedora 4 API requests for manipulating a Container identified by Drupal uuid.  Node content in \napplication/json\n format is massaged into \napplication/sparql-update\n format in order to interact with Fedora.\n\n\nEndpoint\n: http://localhost:8080/islandora-services/collection/\n\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8080/islandora-services/collection/{uuid}\n\n\n\n\nReturns \napplication/ld+json\n RDF metadata for the \npcdm:Collection\n identified by the supplied Drupal uuid.\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8080/islandora-services/collection/\n\n\n\n\nAccepts \napplication/json\n serialized node data.\n\n\nCreates a \npcdm:Collection\n in Fedora using the Drupal node data, associating the newly minted path with the node's uuid. If \nfedora:hasParent\n is supplied supplied in \nPOST\n data, that location will be used to create the new object as a child.\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8080/islandora-services/collection/{uuid}\n\n\n\n\nAccepts \napplication/json\n serialized node data.\n\n\nUpdates metadata in Fedora for the \npcdm:Collection\n associated with the provided Drupal uuid.\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8080/islandora-services/collection/{uuid}\n\n\n\n\nDeletes the \npcdm:Collection\n in Fedora associated with provided Drupal uuid.\n\n\n\n\n\n\n\n\nObject Service\n\n\nUsed for manipulating \npcdm:Objects\n. Essentially wraps the Fedora 4 API requests for manipulating a Container identified by Drupal uuid.  Node content in \napplication/json\n format is massaged into \napplication/sparql-update\n format in order to interact with Fedora.  Certain field values, as well as other files sent along in the message will be converted into \npcdm:Files\n and attached to the newly created \npcdm:Object\n.\n\n\nEndpoint\n: http://localhost:8080/islandora-services/object/\n\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8080/islandora-services/object/{uuid}\n\n\n\n\nReturns \napplication/ld+json\n RDF metadata for the \npcdm:Object\n identified by the supplied Drupal uuid.\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8080/islandora-services/object/\n\n\n\n\nAccepts \nmultipart/form-data\n messages.  One \"part\" of the message will be the JSON serialized Drupal node content.  Other \"parts\" will be files used to create \npcdm:Files\n for the \npcdm:Object\n.\n\n\nCreates a \npcdm:Object\n in Fedora using the Drupal node data, associating the newly minted path with the node's uuid. If \nfedora:hasParent\n is supplied supplied in \nPOST\n data, that location will be used to create the new object as a child.  Certain field values as well as any other files contained in the message will be used to create \npcdm:Files\n associated with this \npcdm:Object\n.\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8080/islandora-services/object/{uuid}\n\n\n\n\nAccepts \nmultipart/form-data\n messages.  One \"part\" of the message will be the JSON serialized Drupal node content.  Other \"parts\" will be files used to create \npcdm:Files\n for the \npcdm:Object\n.\n\n\nUpdates metadata in Fedora for the \npcdm:Object\n associated with the provided Drupal uuid. Certain field values as well as any other files contained in the message will be used to update \npcdm:Files\n associated with this \npcdm:Object\n.\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8080/islandora-services/object/{uuid}\n\n\n\n\nDeletes the \npcdm:Object\n in Fedora associated with provided Drupal uuid. Also deletes any \npcdm:Files\n directly contained by the \npcdm:Object\n.\n\n\n\n\n\n\n\n\nFile Services\n\n\nUsed for manipulating \npcdm:Files\n associated with a \npcdm:Object\n. They will essentially wrap the Fedora 4 API requests for manipulating a \nNonRDFSourceDescription\n identified by \ndcterms:title\n (obj, mods, dc, etc...) and its parent's Drupal uuid. There will be seperate implementations for each applicable \ndcterms:title\n, though each service will abide by a common conventions and behavior. This allows implementations to vary independently based on file type (technical metadata, descriptive metadata, archival binary), while allowing for new services to be easily added over time.\n\n\nGeneral Convention\n\n\nEndpoint\n: http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\n\n\n\nRetrieves the \npcdm:File\n content belonging to the \npcdm:Object\n. The \npcdm:File\n is identified by \ndcterms:title\n and its parents Drupal uuid.\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\n\n\n\nAdds a \npcdm:File\n to the \npcdm:Object\n identified by the provided Drupal uuid. The file's content will be set using the \nPOST\n content, and the provided \ndcterms:title\n will be given to the newly created \npcdm:File\n.\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\n\n\n\nUpdates the \npcdm:File\n with \ndcterms:title\n owned by the \npcdm:Object\n identified by the provided Drupal uuid. The file's content will be set using the \nPUT\n content.\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\n\n\n\nDeletes the \npcdm:File\n with \ndcterms:title\n owned by the \npcdm:Object\n identified by the provided Drupal uuid.\n\n\n\n\n\n\n\n\nExample Services\n\n\nSome example services would include:\n\n\n\n\nhttp://localhost:8080/islandora/services/file/{uuid}/obj\n\n\nhttp://localhost:8080/islandora/services/file/{uuid}/dc\n\n\nhttp://localhost:8080/islandora/services/file/{uuid}/mods\n\n\nhttp://localhost:8080/islandora/services/file/{uuid}/fits\n\n\n\n\nImplementations would differ in the sense that accept headers would be different, and data may have to be transformed differently before being inserted as the \npcdm:File\n.\n\n\nDerivative Services\n\n\nDerivatives (while generally dealt with through Islandora Sync) may need to be dealt with manually, so services will be provided to handle all the common derivatives types an Islandora installation may require. Much like the file services, a general convention on naming and behavior will be enforced, but seperate implementations will be provided. This will allow for maximum flexibility and encourage new services to be easily added and contributed. \n\n\nGeneral Convention\n\n\nEndpoint\n: http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nRetrieves the derivative belonging to the \npcdm:Object\n or \npcdm:Collection\n. The derivative is identified by its type and its parents Drupal uuid.\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nAdds a derivative to the \npcdm:Object\n or \npcdm:Collection\n identified by the provided Drupal uuid. The derivative's content will be set using the \nPOST\n content. The result will reside in either Fedora or Drupal, depending on the derivative.\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nUpdates the derviative for a \npcdm:Object\n or \npcdm:Collection\n identified by the provided Drupal uuid. The derivative's content will be set using the \nPUT\n content. The result will reside in either Fedora or Drupal, depending on the derivative.\n\n\n\n\n\n\n\n\nPATCH\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nAsynchronously regenerates the derivative for a \npcdm:Object\n or \npcdm:Collection\n identified by the provided Drupal uuid. The result will reside in either Fedora or Drupal, depending on the derivative.\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nDeletes the derivative for the \npcdm:Object\n or \npcdm:Collection\n identified by the provided Drupal uuid. The derivative will be removed from either Fedora or Drupal, depending on the derivative.\n\n\n\n\n\n\n\n\nExample Services\n\n\nSome example services would include:\n\n\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/tn\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/medium_size\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/jp2\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/techmd\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/mp3\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/mp4\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/mkv\n\n\n\n\nImplementations would differ in the sense that different derivatives will be created from varying sources using varying programs. Also, display derivatives should reside in Drupal (TN, JP2, etc...) while technical metadata should reside in Fedora.  Within Drupal, different derivatives will reside as different field types.\n\n\nZip Ingest Services\n\n\nInstead of multipart/form-data reqeusts, application/zip requests can be accepted to construct a pcdm:Object based on content model.  While this is convienent for basic object types, it's required for more complicated content models such as Book, Newspaper, and Compound.  Message bodies are assumed to be in Islandora Zip Importer format.\n\n\nGeneral Convention\n\n\nEndpoint\n: http://localhost:8080/islandora/services/zip/ingest/{content_model}/\n\nActions\n:\n\n\n\n\nPOST\n http://localhost:8080/islandora/services/zip/ingest/{content_model}/\n\n\nAccepts \napplication/zip\n messages\n\n\nTakes the supplied zip file, extracts its contents, and uses it to completely construct an object of the specified content-model.\n\n\n\n\n\n\n\n\nExample services\n\n\n\n\nhttp://localhost:8080/islandora/services/zip/large_image\n\n\nhttp://localhost:8080/islandora/services/zip/audio\n\n\nhttp://localhost:8080/islandora/services/zip/video\n\n\nhttp://localhost:8080/islandora/services/zip/book\n\n\nhttp://localhost:8080/islandora/services/zip/newspaper\n\n\nhttp://localhost:8080/islandora/services/zip/compound", 
            "title": "Services"
        }, 
        {
            "location": "/technical-documentation/services/#middleware-services", 
            "text": "Islandora middleware services utilize the Fedora 4 REST API and the Drupal Services module to create an API for the majority of interactions between the two systems. The Drupal uuid will be used to identify  pcdm:Objects  (and  pcdm:Files  thereof) when using these services.  The breakdown of services is as follows:   There will be a services to provide CRUD operations for  pcdm:Collections ,  pcdm:Objects  and  pcdm:Files .  There will be a service to provide creational operations using zip content based on content model.  For example:  POST  a zip file containing book pages Islandora Book Batch format to create an entire book object (with pages and derivatives processed asynchronously, of course).  There will be services per derivative type to perform operations based on the node UUID of the parent.  PATCH  to generate a new thumbnail for a  pcdm:Object .   For more information on PCDM, please see  this  page.", 
            "title": "Middleware Services"
        }, 
        {
            "location": "/technical-documentation/services/#collection-service", 
            "text": "Used for manipulating  pcdm:Collections . Essentially wraps the Fedora 4 API requests for manipulating a Container identified by Drupal uuid.  Node content in  application/json  format is massaged into  application/sparql-update  format in order to interact with Fedora.  Endpoint : http://localhost:8080/islandora-services/collection/  Actions :    GET  http://localhost:8080/islandora-services/collection/{uuid}   Returns  application/ld+json  RDF metadata for the  pcdm:Collection  identified by the supplied Drupal uuid.     POST  http://localhost:8080/islandora-services/collection/   Accepts  application/json  serialized node data.  Creates a  pcdm:Collection  in Fedora using the Drupal node data, associating the newly minted path with the node's uuid. If  fedora:hasParent  is supplied supplied in  POST  data, that location will be used to create the new object as a child.     PUT  http://localhost:8080/islandora-services/collection/{uuid}   Accepts  application/json  serialized node data.  Updates metadata in Fedora for the  pcdm:Collection  associated with the provided Drupal uuid.     DELETE  http://localhost:8080/islandora-services/collection/{uuid}   Deletes the  pcdm:Collection  in Fedora associated with provided Drupal uuid.", 
            "title": "Collection Service"
        }, 
        {
            "location": "/technical-documentation/services/#object-service", 
            "text": "Used for manipulating  pcdm:Objects . Essentially wraps the Fedora 4 API requests for manipulating a Container identified by Drupal uuid.  Node content in  application/json  format is massaged into  application/sparql-update  format in order to interact with Fedora.  Certain field values, as well as other files sent along in the message will be converted into  pcdm:Files  and attached to the newly created  pcdm:Object .  Endpoint : http://localhost:8080/islandora-services/object/  Actions :    GET  http://localhost:8080/islandora-services/object/{uuid}   Returns  application/ld+json  RDF metadata for the  pcdm:Object  identified by the supplied Drupal uuid.     POST  http://localhost:8080/islandora-services/object/   Accepts  multipart/form-data  messages.  One \"part\" of the message will be the JSON serialized Drupal node content.  Other \"parts\" will be files used to create  pcdm:Files  for the  pcdm:Object .  Creates a  pcdm:Object  in Fedora using the Drupal node data, associating the newly minted path with the node's uuid. If  fedora:hasParent  is supplied supplied in  POST  data, that location will be used to create the new object as a child.  Certain field values as well as any other files contained in the message will be used to create  pcdm:Files  associated with this  pcdm:Object .     PUT  http://localhost:8080/islandora-services/object/{uuid}   Accepts  multipart/form-data  messages.  One \"part\" of the message will be the JSON serialized Drupal node content.  Other \"parts\" will be files used to create  pcdm:Files  for the  pcdm:Object .  Updates metadata in Fedora for the  pcdm:Object  associated with the provided Drupal uuid. Certain field values as well as any other files contained in the message will be used to update  pcdm:Files  associated with this  pcdm:Object .     DELETE  http://localhost:8080/islandora-services/object/{uuid}   Deletes the  pcdm:Object  in Fedora associated with provided Drupal uuid. Also deletes any  pcdm:Files  directly contained by the  pcdm:Object .", 
            "title": "Object Service"
        }, 
        {
            "location": "/technical-documentation/services/#file-services", 
            "text": "Used for manipulating  pcdm:Files  associated with a  pcdm:Object . They will essentially wrap the Fedora 4 API requests for manipulating a  NonRDFSourceDescription  identified by  dcterms:title  (obj, mods, dc, etc...) and its parent's Drupal uuid. There will be seperate implementations for each applicable  dcterms:title , though each service will abide by a common conventions and behavior. This allows implementations to vary independently based on file type (technical metadata, descriptive metadata, archival binary), while allowing for new services to be easily added over time.", 
            "title": "File Services"
        }, 
        {
            "location": "/technical-documentation/services/#general-convention", 
            "text": "Endpoint : http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title} Actions :    GET  http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}   Retrieves the  pcdm:File  content belonging to the  pcdm:Object . The  pcdm:File  is identified by  dcterms:title  and its parents Drupal uuid.     POST  http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}   Adds a  pcdm:File  to the  pcdm:Object  identified by the provided Drupal uuid. The file's content will be set using the  POST  content, and the provided  dcterms:title  will be given to the newly created  pcdm:File .     PUT  http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}   Updates the  pcdm:File  with  dcterms:title  owned by the  pcdm:Object  identified by the provided Drupal uuid. The file's content will be set using the  PUT  content.     DELETE  http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}   Deletes the  pcdm:File  with  dcterms:title  owned by the  pcdm:Object  identified by the provided Drupal uuid.", 
            "title": "General Convention"
        }, 
        {
            "location": "/technical-documentation/services/#example-services", 
            "text": "Some example services would include:   http://localhost:8080/islandora/services/file/{uuid}/obj  http://localhost:8080/islandora/services/file/{uuid}/dc  http://localhost:8080/islandora/services/file/{uuid}/mods  http://localhost:8080/islandora/services/file/{uuid}/fits   Implementations would differ in the sense that accept headers would be different, and data may have to be transformed differently before being inserted as the  pcdm:File .", 
            "title": "Example Services"
        }, 
        {
            "location": "/technical-documentation/services/#derivative-services", 
            "text": "Derivatives (while generally dealt with through Islandora Sync) may need to be dealt with manually, so services will be provided to handle all the common derivatives types an Islandora installation may require. Much like the file services, a general convention on naming and behavior will be enforced, but seperate implementations will be provided. This will allow for maximum flexibility and encourage new services to be easily added and contributed.", 
            "title": "Derivative Services"
        }, 
        {
            "location": "/technical-documentation/services/#general-convention_1", 
            "text": "Endpoint : http://localhost:8080/islandora-services/derivative/{uuid}/{type} Actions :    GET  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Retrieves the derivative belonging to the  pcdm:Object  or  pcdm:Collection . The derivative is identified by its type and its parents Drupal uuid.     POST  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Adds a derivative to the  pcdm:Object  or  pcdm:Collection  identified by the provided Drupal uuid. The derivative's content will be set using the  POST  content. The result will reside in either Fedora or Drupal, depending on the derivative.     PUT  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Updates the derviative for a  pcdm:Object  or  pcdm:Collection  identified by the provided Drupal uuid. The derivative's content will be set using the  PUT  content. The result will reside in either Fedora or Drupal, depending on the derivative.     PATCH  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Asynchronously regenerates the derivative for a  pcdm:Object  or  pcdm:Collection  identified by the provided Drupal uuid. The result will reside in either Fedora or Drupal, depending on the derivative.     DELETE  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Deletes the derivative for the  pcdm:Object  or  pcdm:Collection  identified by the provided Drupal uuid. The derivative will be removed from either Fedora or Drupal, depending on the derivative.", 
            "title": "General Convention"
        }, 
        {
            "location": "/technical-documentation/services/#example-services_1", 
            "text": "Some example services would include:   http://localhost:8080/islandora/services/derivative/{uuid}/tn  http://localhost:8080/islandora/services/derivative/{uuid}/medium_size  http://localhost:8080/islandora/services/derivative/{uuid}/jp2  http://localhost:8080/islandora/services/derivative/{uuid}/techmd  http://localhost:8080/islandora/services/derivative/{uuid}/mp3  http://localhost:8080/islandora/services/derivative/{uuid}/mp4  http://localhost:8080/islandora/services/derivative/{uuid}/mkv   Implementations would differ in the sense that different derivatives will be created from varying sources using varying programs. Also, display derivatives should reside in Drupal (TN, JP2, etc...) while technical metadata should reside in Fedora.  Within Drupal, different derivatives will reside as different field types.", 
            "title": "Example Services"
        }, 
        {
            "location": "/technical-documentation/services/#zip-ingest-services", 
            "text": "Instead of multipart/form-data reqeusts, application/zip requests can be accepted to construct a pcdm:Object based on content model.  While this is convienent for basic object types, it's required for more complicated content models such as Book, Newspaper, and Compound.  Message bodies are assumed to be in Islandora Zip Importer format.", 
            "title": "Zip Ingest Services"
        }, 
        {
            "location": "/technical-documentation/services/#general-convention_2", 
            "text": "Endpoint : http://localhost:8080/islandora/services/zip/ingest/{content_model}/ Actions :   POST  http://localhost:8080/islandora/services/zip/ingest/{content_model}/  Accepts  application/zip  messages  Takes the supplied zip file, extracts its contents, and uses it to completely construct an object of the specified content-model.", 
            "title": "General Convention"
        }, 
        {
            "location": "/technical-documentation/services/#example-services_2", 
            "text": "http://localhost:8080/islandora/services/zip/large_image  http://localhost:8080/islandora/services/zip/audio  http://localhost:8080/islandora/services/zip/video  http://localhost:8080/islandora/services/zip/book  http://localhost:8080/islandora/services/zip/newspaper  http://localhost:8080/islandora/services/zip/compound", 
            "title": "Example services"
        }, 
        {
            "location": "/technical-documentation/versioning/", 
            "text": "Versioning Policy\n\n\nIslandora CLAW uses \nsemantic versioning\n.\n\n\nMajor version\n . \nMinor version\n . \nPatch\n\n\n\n\nMajor version\n; Major changes, and breaks the API\n\n\nMinor version\n; New features, and does not break the API\n\n\nPatch\n; Bug fixes, and never breaks backward compatability\n\n\n\n\nComponents\n\n\n\n\nAlpaca\n\n\nChullo\n\n\nCLAW\n\n\nCrayfish\n\n\nPDX\n\n\nclaw-docker\n\n\nclaw-docker-all-in-one\n\n\nclaw-base\n\n\nclaw-blazegraph\n\n\nclaw-drupal\n\n\nclaw-fedora\n\n\nclaw-islandora\n\n\nclaw-islandora-karaf-components\n\n\nclaw-karaf\n\n\nclaw-mariadb\n\n\nclaw-maven\n\n\nclaw-open-jdk\n\n\nclaw-oracle-jdk\n\n\nclaw-solr\n\n\nclaw-tomcat\n\n\nclaw-ansible\n\n\nclaw_install_profile\n\n\nIslandora", 
            "title": "Versioning"
        }, 
        {
            "location": "/technical-documentation/versioning/#versioning-policy", 
            "text": "Islandora CLAW uses  semantic versioning .  Major version  .  Minor version  .  Patch   Major version ; Major changes, and breaks the API  Minor version ; New features, and does not break the API  Patch ; Bug fixes, and never breaks backward compatability", 
            "title": "Versioning Policy"
        }, 
        {
            "location": "/technical-documentation/versioning/#components", 
            "text": "Alpaca  Chullo  CLAW  Crayfish  PDX  claw-docker  claw-docker-all-in-one  claw-base  claw-blazegraph  claw-drupal  claw-fedora  claw-islandora  claw-islandora-karaf-components  claw-karaf  claw-mariadb  claw-maven  claw-open-jdk  claw-oracle-jdk  claw-solr  claw-tomcat  claw-ansible  claw_install_profile  Islandora", 
            "title": "Components"
        }, 
        {
            "location": "/user-documentation/2xfor1x/", 
            "text": "What's Different Between Islandora 1.x and 2.x\n\n\nIn the most basic terms, Islandora 7.x-2.x is the version of Islandora that works with \nFedora 4\n. Because Fedora 4 is a vastly different platform than Fedora 3, so too is Islandora 7.x-2.x a major departure from what came before. Switching to 7.x-2.x represents not just a typical upgrade with improvements, features, and bug fixes, but rather a major shift in how objects are stored and managed. \n\n\nMoving from Islandora 7.x-1.x to 7.x-2.x requires a migration of objects, which you can learn about \nhere\n. It also requires some adjustments in how you think about your objects and their relationships, and how to manage them in Islandora, which we will cover below.\n\n\nYou can also check out some of the documentation provided by the Fedora project:\n\n \nConcept Mapping - Fedora 3 to 4\n\n\n \nThe Fedora 4 object model\n\n\n \nFedora 3 to 4 Upgration\n\n\n \nLDP-PCDM-F4 In Action\n\n\nFedora\n\n\nRepository Structure\n\n\nFedora 3 stored all objects at the top level of the repository, although presentation of the objects could mimic a directory structure by having objects 'in' collections and collections 'in' other collections. This image is a helpful oversimplification:\n\n\n\n\nFedora 4 differs considerably in that there is an innate tree hierarchy to the repository rather than a flat structure. Put less simply, \"a Fedora 4 repository consists of a directed acyclic graph of resources where edges represent a parent-child relation\" (\nFedora 4\n).\n\n\nObject Structure\n\n\nFedora 3 objects are FOXML (Fedora Object eXtensible Markup Language) documents, with three elements:\n\n\n\n\nDigital Object Identifier\n: A unique, persistent identifier for the digital object. Also knowns as the PID.\n\n\nSystem Properties\n: A set of system-defined descriptive properties that is necessary to manage and track the object in the repository.\n\n\nDatastream(s)\n: The element in a Fedora digital object that represents a content item.\n\n\n\n\nIn Fedora 4 , what we would have called \nobjects\n are now referred to as \nresources\n and are not composed of XML; instead, they are stored in ModeShape as nodes with RDF properties. They can contain the following elements:\n\n\n\n\nContainer\n: Roughly equivalent to a Fedora 3 object - a conceptual representation of a thing that can contain files or other containers.\n\n\nNon-RDF Source\n: Roughly equivalent to a datastream. A Non-RDF Source (or binary) is simply a bitstream (e.g. JPG, PDF, XML, MP3, etc.).\n\n\n\n\nDatastreams\n\n\nIn Islandora 7.x-2.x, RDF datastreams (RELS-EXT and RELS-INT) are stored as pure RDF in Fedora. Binary datastreams (files, images) are files or \nnonRdfResources\n (see \nPCDM\n). Metadata datastreams (MODS, DC, DwC, PBCore, etc) are whatever you want them to be: either binary files of XML, or mapped to your choice of RDF.\n\n\nPIDs\n\n\nEvery object in a Fedora 3 repository had a Persistent Identifier following the pattern \nnamespace:pid\n. Fedora 4 resources do not have PIDs. Instead, since Fedora 4 is an LDP server, their identifiers are fundamentally their URIs. The PIDs of objects migrated from a Fedora 3 repository can still be stored in Fedora 4, as additional properties on the new Fedora 4 resource.\n\n\nSince resources are stored as \nnodes\n on the Drupal side of Islandora 7.x-2.x, they also have Drupal UUIDs.\n\n\nIslandora\n\n\nIngest\n\n\nIn Fedora 3:\n\n Go to a collection\n\n Click \nManage\n\n\n Add an object\n\n Fill out a metadata form\n* Upload object/Ingest\n\n\nIn Fedora 4:\n\n Click \nAdd Content\n (like any Drupal node)\n\n Select content type \n\n Fill out a metadata form\n    * Add thumbnail, select parent collection, upload object, configure standard Drupal node options (comments, url path, etc)\n\n Ingest occurs asynchronously soon after. \n\n\nCollections\n\n\nBecause objects in Fedora 3 were stored in a flat graph structure instead of a hierarchy, what were presented as collection in Islandora 7.x-1.x were actually objects on the same level as their child objects, with the 'container' or 'folder' aspect of them being a fiction for display created by the relationships between the objects. In Fedora 4, resources do have a true hierarchical structure and must have a \nfedora:hasParent\n relationship to know where they belong in a given repository. Indeed, to migrate objects over from Fedora 3 to Fedora 4, parents must arrive before their children. In its current incarnation, all objects in a 7.x-2.x repository have the Fedora root as a parent and relationships are managed via the \npcdm:hasMember\n predicate. \n\n\nIn its current incarnation, Islandora 7.x-2.x does not include a default display for collections. Instead, Drupal Views can be used to build collections around the \npcdm:hasMember\n value. For more information, please see \nHow To Create A Collection View\n).\n\n\nForms\n\n\nIslandora XML Form Builder\n has not yet been replicated in Islandora 7.x-2.x. Instead, ingest forms can be edited as \ncontent types\n in Drupal, using basic Drupal field management and display tools, and then mapped to RDF in Fedora. For more information, please see \nEditing the Basic Image Form\n or Drupal.org's \nWorking with content types and fields (Drupal 7 and later)\n\n\nDerivatives\n\n\nIn Islandora 7.x-2.x, derivatives are done with \nCamel\n. If you used microservices in 7.x-1.x, this will feel very familiar. When an object is created, a message is sent to a queue, and Camel processes it, using rules to figure out what derivative code to run. The aforementioned derivative code (i.e. the calls to ffmpeg, imagemagick, etc) are written in Java (or PHP that is NON-DRUPAL-RELATED.)", 
            "title": "2xfor1x"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#whats-different-between-islandora-1x-and-2x", 
            "text": "In the most basic terms, Islandora 7.x-2.x is the version of Islandora that works with  Fedora 4 . Because Fedora 4 is a vastly different platform than Fedora 3, so too is Islandora 7.x-2.x a major departure from what came before. Switching to 7.x-2.x represents not just a typical upgrade with improvements, features, and bug fixes, but rather a major shift in how objects are stored and managed.   Moving from Islandora 7.x-1.x to 7.x-2.x requires a migration of objects, which you can learn about  here . It also requires some adjustments in how you think about your objects and their relationships, and how to manage them in Islandora, which we will cover below.  You can also check out some of the documentation provided by the Fedora project:   Concept Mapping - Fedora 3 to 4    The Fedora 4 object model    Fedora 3 to 4 Upgration    LDP-PCDM-F4 In Action", 
            "title": "What's Different Between Islandora 1.x and 2.x"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#fedora", 
            "text": "", 
            "title": "Fedora"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#repository-structure", 
            "text": "Fedora 3 stored all objects at the top level of the repository, although presentation of the objects could mimic a directory structure by having objects 'in' collections and collections 'in' other collections. This image is a helpful oversimplification:   Fedora 4 differs considerably in that there is an innate tree hierarchy to the repository rather than a flat structure. Put less simply, \"a Fedora 4 repository consists of a directed acyclic graph of resources where edges represent a parent-child relation\" ( Fedora 4 ).", 
            "title": "Repository Structure"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#object-structure", 
            "text": "Fedora 3 objects are FOXML (Fedora Object eXtensible Markup Language) documents, with three elements:   Digital Object Identifier : A unique, persistent identifier for the digital object. Also knowns as the PID.  System Properties : A set of system-defined descriptive properties that is necessary to manage and track the object in the repository.  Datastream(s) : The element in a Fedora digital object that represents a content item.   In Fedora 4 , what we would have called  objects  are now referred to as  resources  and are not composed of XML; instead, they are stored in ModeShape as nodes with RDF properties. They can contain the following elements:   Container : Roughly equivalent to a Fedora 3 object - a conceptual representation of a thing that can contain files or other containers.  Non-RDF Source : Roughly equivalent to a datastream. A Non-RDF Source (or binary) is simply a bitstream (e.g. JPG, PDF, XML, MP3, etc.).", 
            "title": "Object Structure"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#datastreams", 
            "text": "In Islandora 7.x-2.x, RDF datastreams (RELS-EXT and RELS-INT) are stored as pure RDF in Fedora. Binary datastreams (files, images) are files or  nonRdfResources  (see  PCDM ). Metadata datastreams (MODS, DC, DwC, PBCore, etc) are whatever you want them to be: either binary files of XML, or mapped to your choice of RDF.", 
            "title": "Datastreams"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#pids", 
            "text": "Every object in a Fedora 3 repository had a Persistent Identifier following the pattern  namespace:pid . Fedora 4 resources do not have PIDs. Instead, since Fedora 4 is an LDP server, their identifiers are fundamentally their URIs. The PIDs of objects migrated from a Fedora 3 repository can still be stored in Fedora 4, as additional properties on the new Fedora 4 resource.  Since resources are stored as  nodes  on the Drupal side of Islandora 7.x-2.x, they also have Drupal UUIDs.", 
            "title": "PIDs"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#islandora", 
            "text": "", 
            "title": "Islandora"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#ingest", 
            "text": "In Fedora 3:  Go to a collection  Click  Manage   Add an object  Fill out a metadata form\n* Upload object/Ingest  In Fedora 4:  Click  Add Content  (like any Drupal node)  Select content type   Fill out a metadata form\n    * Add thumbnail, select parent collection, upload object, configure standard Drupal node options (comments, url path, etc)  Ingest occurs asynchronously soon after.", 
            "title": "Ingest"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#collections", 
            "text": "Because objects in Fedora 3 were stored in a flat graph structure instead of a hierarchy, what were presented as collection in Islandora 7.x-1.x were actually objects on the same level as their child objects, with the 'container' or 'folder' aspect of them being a fiction for display created by the relationships between the objects. In Fedora 4, resources do have a true hierarchical structure and must have a  fedora:hasParent  relationship to know where they belong in a given repository. Indeed, to migrate objects over from Fedora 3 to Fedora 4, parents must arrive before their children. In its current incarnation, all objects in a 7.x-2.x repository have the Fedora root as a parent and relationships are managed via the  pcdm:hasMember  predicate.   In its current incarnation, Islandora 7.x-2.x does not include a default display for collections. Instead, Drupal Views can be used to build collections around the  pcdm:hasMember  value. For more information, please see  How To Create A Collection View ).", 
            "title": "Collections"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#forms", 
            "text": "Islandora XML Form Builder  has not yet been replicated in Islandora 7.x-2.x. Instead, ingest forms can be edited as  content types  in Drupal, using basic Drupal field management and display tools, and then mapped to RDF in Fedora. For more information, please see  Editing the Basic Image Form  or Drupal.org's  Working with content types and fields (Drupal 7 and later)", 
            "title": "Forms"
        }, 
        {
            "location": "/user-documentation/2xfor1x/#derivatives", 
            "text": "In Islandora 7.x-2.x, derivatives are done with  Camel . If you used microservices in 7.x-1.x, this will feel very familiar. When an object is created, a message is sent to a queue, and Camel processes it, using rules to figure out what derivative code to run. The aforementioned derivative code (i.e. the calls to ffmpeg, imagemagick, etc) are written in Java (or PHP that is NON-DRUPAL-RELATED.)", 
            "title": "Derivatives"
        }, 
        {
            "location": "/user-documentation/adding-object-to-collection-in-islandora-7.x-2.x/", 
            "text": "Adding an object to a collection in Islandora 7.x-2.x\n\n\nAdding instead of Ingesting\n\n\nI am going to start using Drupal terminology where it makes sense. Once you've got a collection node created, you can associate some content with it.  This will be important when we want to create collection views.\n\n\nAdding a Basic Image content type to an existing collection.\n\n\nThe \nBasic Image\n content type provides the user with the option to upload a gif, jpg, or png image to Fedora along with descriptive metadata. Similar to other Drupal content types there are only a few steps to add a \nBasic Image\n.\n\n\n\n\nSelect \nAdd content\n from the admin menu or the Navigation block, then select  Basic Image from the list of content types.\n    \n\n\nFill in the fields in the associated metadata form. Ensure you include:\n\n\nthe title of your image\n\n\nchoose the image file to upload\n\n\nselect the parent collection you want your image to be a member of. \n  \n\n\n\n\n\n\nSelect \nSave\n to create a new \nBasic Image\n.\n\n\nYour new \nBasic Image\n displayed in Drupal.", 
            "title": "Adding object to collection in islandora 7.x 2.x"
        }, 
        {
            "location": "/user-documentation/adding-object-to-collection-in-islandora-7.x-2.x/#adding-an-object-to-a-collection-in-islandora-7x-2x", 
            "text": "", 
            "title": "Adding an object to a collection in Islandora 7.x-2.x"
        }, 
        {
            "location": "/user-documentation/adding-object-to-collection-in-islandora-7.x-2.x/#adding-instead-of-ingesting", 
            "text": "I am going to start using Drupal terminology where it makes sense. Once you've got a collection node created, you can associate some content with it.  This will be important when we want to create collection views.", 
            "title": "Adding instead of Ingesting"
        }, 
        {
            "location": "/user-documentation/adding-object-to-collection-in-islandora-7.x-2.x/#adding-a-basic-image-content-type-to-an-existing-collection", 
            "text": "The  Basic Image  content type provides the user with the option to upload a gif, jpg, or png image to Fedora along with descriptive metadata. Similar to other Drupal content types there are only a few steps to add a  Basic Image .   Select  Add content  from the admin menu or the Navigation block, then select  Basic Image from the list of content types.\n      Fill in the fields in the associated metadata form. Ensure you include:  the title of your image  choose the image file to upload  select the parent collection you want your image to be a member of. \n      Select  Save  to create a new  Basic Image .  Your new  Basic Image  displayed in Drupal.", 
            "title": "Adding a Basic Image content type to an existing collection."
        }, 
        {
            "location": "/user-documentation/creating-collections-in-islandora-7.x-2.x/", 
            "text": "Creating Collections in Islandora 7.x-2.x\n\n\nAbout Collections in Islandora 7.x-2.x\n\n\nIf you are used to creating collections in traditional Islandora, but wished the process was more 'drupally', then you'll be happy to know that creating a collection in Islandora 7.x-2.x is much like creating any other Drupal content.  Here are the steps that outline that process.\n\n\nCreating collections in Islandora 7.x-2.x is a lot like adding any type of node in Drupal.  \n\n\n\n\n\n\nSelect \nAdd content\n from the admin menu or the Navigation block.\n\n\n\n\n\n\n\n\nSelect \nCollection\n from the list of content types.\n\n\n\n\n\n\n\n\nFill in the fields in the associated metadata form.\n\n\n\n\n\n\n\n\nSelect \nSave\n to create a new collection.\n\n\n\n\n\n\n\n\nYour new collection displayed in Drupal.", 
            "title": "Creating collections in islandora 7.x 2.x"
        }, 
        {
            "location": "/user-documentation/creating-collections-in-islandora-7.x-2.x/#creating-collections-in-islandora-7x-2x", 
            "text": "", 
            "title": "Creating Collections in Islandora 7.x-2.x"
        }, 
        {
            "location": "/user-documentation/creating-collections-in-islandora-7.x-2.x/#about-collections-in-islandora-7x-2x", 
            "text": "If you are used to creating collections in traditional Islandora, but wished the process was more 'drupally', then you'll be happy to know that creating a collection in Islandora 7.x-2.x is much like creating any other Drupal content.  Here are the steps that outline that process.  Creating collections in Islandora 7.x-2.x is a lot like adding any type of node in Drupal.      Select  Add content  from the admin menu or the Navigation block.     Select  Collection  from the list of content types.     Fill in the fields in the associated metadata form.     Select  Save  to create a new collection.     Your new collection displayed in Drupal.", 
            "title": "About Collections in Islandora 7.x-2.x"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/", 
            "text": "Editing the Basic Image Form\n\n\nGoodbye Islandora XML Forms ... Hello Drupal Field UI\n\n\nThose Islandorians that have used (and love) the XML Form Builder will notice a substantial difference in how forms are constructed and \nhow the fields are displayed\n. The full functionality of the XML Form Builder is not replicated in the 7.x-2.x version of Islandora yet, so help the community with working that out.\n\n\nDrupal Field UI\n\n\nTo use Islandora-speak the ingest form is now a Drupal content type and a content type is built using Drupal's Field UI. Readers should first review the \nassociated Drupal documentation\n as it provides a foundational understanding of content types and their fields.  \n\n\n\n\nOnce you have created content with your content type, it is very difficult to change so planning and modelling your data before hand is important.\n\n\n\n\nEach field has:\n\n\n\n\na label\n\n\neg. \nDC Title\n\n\n\n\n\n\na machine name\n\n\neg. \nfield_dc_title\n\n\nnote Drupal powered vs Islandora XML Forms:\n\n\nonce you have created/defined a field in a content type, \nyou can reuse that field in other content types\n  \n\n\nAs an example you can create a field for Dublin Core DCMI types and then use that field in any other content type.\n\n\n\n\n\n\nthe type of data to be stored\n\n\neg. \nLong Text\n\n\n\n\n\n\nthe widget or form element used to enter/edit the data\n\n\neg. \nText area (multiple rows)\n\n\n\n\n\n\n\n\n\n\nScreenshot of Basic Image Fields\n\n\nDepending on the Widget selected, you will define further properties for the field you've created.\n\n\nEditing the Basic Image Content Type\n\n\nRearranging fields\n\n\nThe Drupal Field UI allows you to easily rearrange fields in the order you wish to present them to the user. In the screenshot above you'll note that I've dragged the DC Title field to the top of the list of fields. Don't forget to \nSave\n your changes.\n\n\nEditing an existing field\n\n\nAs an example if we want to edit the DC Title field, select \nEdit\n from the operations column for that field.  The Edit tab for the field displays the editable properties including:\n\n\n\n\nis it a Required Field?\n\n\nan option to provide or update Help text for the field to guide user or explain the data entry practice for the field.\n\n\nthe type of text filter to apply.\n\n\nprovide a default value for the field\n\n\npermissions for the field (who can edit and/or view it)\n\n\nrdf mapping for the field\n\n\n\n\n\n\nField Edit Tab\n\n\nIf your field has existing data (eg. you created content using the content type already), then the changes you can apply to the field are somewhat limited.\n\n\nThe Field Settings tab for the DC Title field warns the user that it can't be changed because data already exists in that field. That's why planning your fields and defining their properties is so important.\n\n\n\n\nField Settings Tab\n\n\nDepending on the field type selected, different widgets may be displayed.\n\n\n\n\nField Widget Tab\n\n\nAdding a new field\n\n\nAdding a simple select field\n\n\nOne of the ways to improve the user experience, data quality, and faceted displays with forms is to provide select or autocomplete options for your users.  As an example, the goal of these steps is to add a select field to your content type.\n\n\n\n\n\n\nCreate a new field called Image Type, with a Field Type of List (Text) and a Widget of Select List.\n    \n\n\n\n\n\n\nWe'll need some terms for our Image Type field. Whenever possible it is best to use a standard vocabulary (and if it is linked data friendly even better). As an example we'll use the Library of Congress' \nResource Types vocabulary for Still Image\n to provide three terms for our select list: Drawing, Photograph, and Print. These are added as key value pairs - eg. Drawing|Drawing.\n    \n\n\n\n\n\n\nAfter you've added your terms, you can define other properties of the field like its label, help text, whether it is required or not, etc.\n    \n\n\n\n\n\n\nTO DO\n Map to RDF.\n\n\n\n\n\n\nMove the field to an appropriate location.\n\n\n\n\n\n\nAdding a select field using a Drupal taxonomy\n\n\nTo add a select field using a Drupal taxonomy you first need to \nAdd a Drupal Taxonomy\n. A taxonomy is useful when you have many terms or when you want to provide search/displays based on a controlled vocabulary. The purpose of these steps are to add a new field called DCMI Type that uses a Field Type of Term Reference and that term reference uses a taxonomy, DCMI Type, to provide a list of checkboxes for the user to select. By default Image is checked.\n\n\n\n\n\n\nAdd a new field.\n    \n\n\n\n\n\n\nEdit field properties - add some help text, since this is the Basic Image content type select StillImage as the default value for the field. The field could potentially have multiple values (eg. Image and StillImage)\n    \n\n\n\n\n\n\nSelect the field widget Check boxes / radio buttons.\n    \n\n\n\n\n\n\nSave your field.\n\n\n\n\n\n\nMove it to an appropriate spot in your content type.", 
            "title": "Editing basic image form in islandora 7.x 2.x"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#editing-the-basic-image-form", 
            "text": "", 
            "title": "Editing the Basic Image Form"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#goodbye-islandora-xml-forms-hello-drupal-field-ui", 
            "text": "Those Islandorians that have used (and love) the XML Form Builder will notice a substantial difference in how forms are constructed and  how the fields are displayed . The full functionality of the XML Form Builder is not replicated in the 7.x-2.x version of Islandora yet, so help the community with working that out.", 
            "title": "Goodbye Islandora XML Forms ... Hello Drupal Field UI"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#drupal-field-ui", 
            "text": "To use Islandora-speak the ingest form is now a Drupal content type and a content type is built using Drupal's Field UI. Readers should first review the  associated Drupal documentation  as it provides a foundational understanding of content types and their fields.     Once you have created content with your content type, it is very difficult to change so planning and modelling your data before hand is important.", 
            "title": "Drupal Field UI"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#each-field-has", 
            "text": "a label  eg.  DC Title    a machine name  eg.  field_dc_title  note Drupal powered vs Islandora XML Forms:  once you have created/defined a field in a content type,  you can reuse that field in other content types     As an example you can create a field for Dublin Core DCMI types and then use that field in any other content type.    the type of data to be stored  eg.  Long Text    the widget or form element used to enter/edit the data  eg.  Text area (multiple rows)      Screenshot of Basic Image Fields  Depending on the Widget selected, you will define further properties for the field you've created.", 
            "title": "Each field has:"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#editing-the-basic-image-content-type", 
            "text": "", 
            "title": "Editing the Basic Image Content Type"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#rearranging-fields", 
            "text": "The Drupal Field UI allows you to easily rearrange fields in the order you wish to present them to the user. In the screenshot above you'll note that I've dragged the DC Title field to the top of the list of fields. Don't forget to  Save  your changes.", 
            "title": "Rearranging fields"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#editing-an-existing-field", 
            "text": "As an example if we want to edit the DC Title field, select  Edit  from the operations column for that field.  The Edit tab for the field displays the editable properties including:   is it a Required Field?  an option to provide or update Help text for the field to guide user or explain the data entry practice for the field.  the type of text filter to apply.  provide a default value for the field  permissions for the field (who can edit and/or view it)  rdf mapping for the field    Field Edit Tab  If your field has existing data (eg. you created content using the content type already), then the changes you can apply to the field are somewhat limited.  The Field Settings tab for the DC Title field warns the user that it can't be changed because data already exists in that field. That's why planning your fields and defining their properties is so important.   Field Settings Tab  Depending on the field type selected, different widgets may be displayed.   Field Widget Tab", 
            "title": "Editing an existing field"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#adding-a-new-field", 
            "text": "", 
            "title": "Adding a new field"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#adding-a-simple-select-field", 
            "text": "One of the ways to improve the user experience, data quality, and faceted displays with forms is to provide select or autocomplete options for your users.  As an example, the goal of these steps is to add a select field to your content type.    Create a new field called Image Type, with a Field Type of List (Text) and a Widget of Select List.\n        We'll need some terms for our Image Type field. Whenever possible it is best to use a standard vocabulary (and if it is linked data friendly even better). As an example we'll use the Library of Congress'  Resource Types vocabulary for Still Image  to provide three terms for our select list: Drawing, Photograph, and Print. These are added as key value pairs - eg. Drawing|Drawing.\n        After you've added your terms, you can define other properties of the field like its label, help text, whether it is required or not, etc.\n        TO DO  Map to RDF.    Move the field to an appropriate location.", 
            "title": "Adding a simple select field"
        }, 
        {
            "location": "/user-documentation/editing-basic-image-form-in-islandora-7.x-2.x/#adding-a-select-field-using-a-drupal-taxonomy", 
            "text": "To add a select field using a Drupal taxonomy you first need to  Add a Drupal Taxonomy . A taxonomy is useful when you have many terms or when you want to provide search/displays based on a controlled vocabulary. The purpose of these steps are to add a new field called DCMI Type that uses a Field Type of Term Reference and that term reference uses a taxonomy, DCMI Type, to provide a list of checkboxes for the user to select. By default Image is checked.    Add a new field.\n        Edit field properties - add some help text, since this is the Basic Image content type select StillImage as the default value for the field. The field could potentially have multiple values (eg. Image and StillImage)\n        Select the field widget Check boxes / radio buttons.\n        Save your field.    Move it to an appropriate spot in your content type.", 
            "title": "Adding a select field using a Drupal taxonomy"
        }, 
        {
            "location": "/user-documentation/editing-object-metadata-in-islandora-7.x-2/", 
            "text": "Editing a Basic Image Node's Metadata in Islandora 7.x-2\n\n\nEdit\n\n\nEditing Basic Image nodes in Islandora 7.x-2 is like editing any other Drupal node. First you need to have the permission to edit the node, if you don't have permission, then you will not be able to see the \nEdit\n option on the node. \n\n\n\n\nSelecting \nEdit\n takes the user to the node's metadata form and any field the use has permissions to edit can be edited (eg. modify text in text fields or textareas, replace file fields like thumbnails or other images).\n\n\n\n\nSave\n\n\nOnce you have completed your changes, you can either 'Preview' your changes, or you can 'Save' the changes.", 
            "title": "Editing object metadata in islandora 7.x 2"
        }, 
        {
            "location": "/user-documentation/editing-object-metadata-in-islandora-7.x-2/#editing-a-basic-image-nodes-metadata-in-islandora-7x-2", 
            "text": "", 
            "title": "Editing a Basic Image Node's Metadata in Islandora 7.x-2"
        }, 
        {
            "location": "/user-documentation/editing-object-metadata-in-islandora-7.x-2/#edit", 
            "text": "Editing Basic Image nodes in Islandora 7.x-2 is like editing any other Drupal node. First you need to have the permission to edit the node, if you don't have permission, then you will not be able to see the  Edit  option on the node.    Selecting  Edit  takes the user to the node's metadata form and any field the use has permissions to edit can be edited (eg. modify text in text fields or textareas, replace file fields like thumbnails or other images).", 
            "title": "Edit"
        }, 
        {
            "location": "/user-documentation/editing-object-metadata-in-islandora-7.x-2/#save", 
            "text": "Once you have completed your changes, you can either 'Preview' your changes, or you can 'Save' the changes.", 
            "title": "Save"
        }, 
        {
            "location": "/user-documentation/form-field-select-taxonomy-in-islandora-7.x-2.x/", 
            "text": "Creating a Taxonomy you can use in your Islandora Content Type\n\n\nTaxonomies\n\n\nDrupal vs Islandora XML Forms\n\n\nTaxonomies and the ability to incorporate them into Islandora XML Forms have been something the community has mostly worked around.  Drupal's taxonomy module allows the user to create a standard set of terms that can be leveraged in a content type.  The select field type in Islandora XML Forms becomes unmanageable when you had more than 10 items (it was easier to add the items in plain XML, than it was to add them through the XML Forms interface).  Drupal taxonomies will hopefully simplify the standardization, maintenance and use of vocabularies within the Islandora framework.\n\n\nExamples\n\n\nAdding a Drupal Taxonomy based on DublinCore's DCMI Type Vocabulary\n\n\n\"The \nDCMI Type Vocabulary\n provides a general, cross-domain list of approved terms that may be used as values for the Type element to identify the genre of a resource.\"\n1\n  \n\n\nThe goal of this task is to create a taxonomy that can be used as a field with the field type of \nTerm Reference\n and uses the \nSelect\n Widget.  \nTerm Reference\n will draw on our DCMI Type taxonomy.\n\n\nCreate a new Taxonomy\n\n\n\n\nTo create a new taxonomy, select \nStructure \n Taxonomy \n Add taxonomy\n. I'm going to call my taxonomy \nDCMI Type\n.\n    \n\n\nThe next thing you'll want to do is select \n+Add term\n to add terms to your taxonomy. The DCMI has \nprovided a list\n with definitions.\n   \n\n\nKeep adding terms until you've captured the terms and save your taxonomy.\n   \n\n\n\n\nSee \nEditing an Ingest form\n to see how we create a new field in the Basic Image content type.\n\n\n\n\n1\n http://dublincore.org/documents/2000/07/11/dcmi-type-vocabulary/", 
            "title": "Form field select taxonomy in islandora 7.x 2.x"
        }, 
        {
            "location": "/user-documentation/form-field-select-taxonomy-in-islandora-7.x-2.x/#creating-a-taxonomy-you-can-use-in-your-islandora-content-type", 
            "text": "", 
            "title": "Creating a Taxonomy you can use in your Islandora Content Type"
        }, 
        {
            "location": "/user-documentation/form-field-select-taxonomy-in-islandora-7.x-2.x/#taxonomies", 
            "text": "", 
            "title": "Taxonomies"
        }, 
        {
            "location": "/user-documentation/form-field-select-taxonomy-in-islandora-7.x-2.x/#drupal-vs-islandora-xml-forms", 
            "text": "Taxonomies and the ability to incorporate them into Islandora XML Forms have been something the community has mostly worked around.  Drupal's taxonomy module allows the user to create a standard set of terms that can be leveraged in a content type.  The select field type in Islandora XML Forms becomes unmanageable when you had more than 10 items (it was easier to add the items in plain XML, than it was to add them through the XML Forms interface).  Drupal taxonomies will hopefully simplify the standardization, maintenance and use of vocabularies within the Islandora framework.", 
            "title": "Drupal vs Islandora XML Forms"
        }, 
        {
            "location": "/user-documentation/form-field-select-taxonomy-in-islandora-7.x-2.x/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/user-documentation/form-field-select-taxonomy-in-islandora-7.x-2.x/#adding-a-drupal-taxonomy-based-on-dublincores-dcmi-type-vocabulary", 
            "text": "\"The  DCMI Type Vocabulary  provides a general, cross-domain list of approved terms that may be used as values for the Type element to identify the genre of a resource.\" 1     The goal of this task is to create a taxonomy that can be used as a field with the field type of  Term Reference  and uses the  Select  Widget.   Term Reference  will draw on our DCMI Type taxonomy.  Create a new Taxonomy   To create a new taxonomy, select  Structure   Taxonomy   Add taxonomy . I'm going to call my taxonomy  DCMI Type .\n      The next thing you'll want to do is select  +Add term  to add terms to your taxonomy. The DCMI has  provided a list  with definitions.\n     Keep adding terms until you've captured the terms and save your taxonomy.\n      See  Editing an Ingest form  to see how we create a new field in the Basic Image content type.   1  http://dublincore.org/documents/2000/07/11/dcmi-type-vocabulary/", 
            "title": "Adding a Drupal Taxonomy based on DublinCore's DCMI Type Vocabulary"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/", 
            "text": "Intro to Islandora CLAW\n\n\nIslandora CLAW is the project name for development of Islandora to work with Fedora 4, also known as Islandora 7.x-2.x. To fully understand Islandora CLAW, it is best to start by looking at its contrasts to the previous version of Islandora, known as 7.x-1.x. \n\n\nIslandora 7.x-1.x works as a bridge between Drupal 7.x and Fedora 3. Put simply, Islandora 7.x-1.x is middleware between Fedora 3 and Drupal 7.x, sometimes expressed as a hamburger:\n\n\nIslandora 7.x-1.x (with Fedora 3)\n\n\n\n\nIslandora CLAW (or Islandora 7.x-2.x) does more than simply replace that base layer with Fedora 4. It is a total re-architecting of the interaction between the various pieces. Rather than a hamburger, Islandora CLAW is a chimera:\n\n\nIslandora CLAW (with Fedora 4)\n\n\n\n\nOr, for a diagram that doesn't involve food or animals: \n\n\n\n\nThis new structure has several advantages:\n\n\n\n\nParcelling out the various services and dependencies allows for more horizontal scalability\n\n\nChanging the relationship between Drupal and Fedora allows for a more flexible approach to front-end management (i.e, it need not be Drupal) while also taking much greater advantage of features available from Drupal (i.e, Fedora objects are treated more like nodes, for the purposes of using Drupal contrib modules. Many Islandora 7.x-1.x modules are redundant in Islandora CLAW because they reproduce existing Drupal contrib modules that can be used out of the box in Islandora CLAW).\n\n\nEasier to keep up-to-date as not all pieces must be versioned together.\n\n\nInstallations tools (Ansible, Docker, Vagrant) can automate uniting the pieces in a simple, clean installation process. Islandora has always been a turn-key repository solution, in the sense that it needs no customization once installed. With Islandora CLAW, that installation process is much smoother, with automated solutions that can be used in production.\n\n\n\n\nEcosystem\n\n\nAlpaca\n\n\nEvent driven middleware based on Apache Camel that synchronizes Fedora 4 with Drupal.\n\n\nChullo\n\n\nA PHP client for Fedora 4 built using Guzzle and EasyRdf.\n\n\nCLAW\n\n\nA container with references to all of the other components that make up Islandora CLAW. Also contains documentation and project discussions.\n\n\nCrayfish\n\n\nTop level container for the various Islandora CLAW microservices.\n\n\nIslandora\n\n\nThe Drupal modules associated with CLAW. Work is underway to have this as a project on \ndrupal.org\n.\n\n\nPDX\n\n\nTop level container for the various PCDM specific Islandora CLAW microservices.\n\n\nWhy Switch?\n\n\nIslandora 7.x-1.x is a tried and tested product with a vibrant user and contributor community and many tools and add-ons available to customize and expand its uses. Islandora CLAW is a major departure, representing a great deal of work both in development of the software, and to migrate and upgrade existing Islandora sites. So why make the change?\n\n\nFedora\n\n\nThe primary motive for moving to Islandora CLAW is to stay current with the repository layer of our ecosystem. Moving to Fedora 4 is vital for the long-term utility of the project.\n\n\n\n\nFedora 3 is End-of-Life and has not been supported since 2015. This means that there will be no improvements, bug fixes, or security patches released for the software, drastically increasing individual maintenance needs for adopters. \n\n\nFedora 3 experiences significant slowdown when repositories reach a large (millions) number of objects. Fedora 4 is much more scalable, and is specifically engineered to be horizontally scalable in ways that Fedora 3 cannot.\n\n\n\n\nDrupal\n\n\nDrupal 8\n has been officially released and development has begun on Drupal 9. Official Drupal policy will see Drupal 7 become unsupported when Drupal 9 is released, putting it in the same precarious territory as Fedora 3. \n\n\nThe initial phases of Islandora CLAW development worked with Drupal 7 as a front-end, but Islandora CLAW has been architected with a pivot to Drupal 8 in mind from its very inception. As of June, 2016, Islandora CLAW development has pivoted fully to Drupal 8, ensuring that when the Islandora Community is ready to make the move, there will be a version of Islandora that functions with the latest and best-supported versions of both our front-end and repository layers by pairing Drupal 8 with Fedora 4.\n\n\nCommunity-Driven Design\n\n\nThe Islandora community has grown significantly since the project began, both in terms of users and contributors. For the first time, we are in a position to have a truly community-driven development process, in which any Islandora user can participate at whatever level fits their interests and abilities. Islandora CLAW has worked with the broader Islandora community to solicit use-cases, put forward prospectuses and project plans for review and editing, and has been developed with a mix of funding from Islandora Foundation members and volunteer developers working on sprints.\n\n\nIslandora CLAW is developed \nby\n the Islandora community, \nfor\n the Islandora community. As a member of the Islandora community, you can help to steer the direction it takes.\n\n\nLinked Data\n\n\nLinked Data is a big concept. A \ndefinition by Tim Bernes-Lee\n from 2006 articulates the basic idea in the context of the \"Semantic Web\":   \n\n\n\n\nIt is about making links, so that a person or machine can explore the web of data. With linked data, when you have some of it, you can find other, related, data.\n\n\nLike the web of hypertext, the web of data is constructed with documents on the web. However, unlike the web of hypertext, where links are relationships anchors in hypertext documents written in HTML, for data they links between arbitrary things described by RDF. The URIs identify any kind of object or concept. But for HTML or RDF, the same expectations apply to make the web grow:\n\n\n\n\n\n\nUse URIs as names for things\n\n\n\n\n\n\nUse HTTP URIs so that people can look up those names.\n\n\n\n\n\n\nWhen someone looks up a URI, provide useful information, using the standards (RDF*, SPARQL)\n\n\n\n\n\n\nInclude links to other URIs. so that they can discover more things.\n\n\n\n\n\n\n\n\nLDP is an official W3C recommendation. According to \ntheir spec\n, Linked Data Platform (LDP) defines a set of rules for HTTP operations on web resources, some based on RDF, to provide an architecture for read-write Linked Data on the web. Put more simply: An LDP server is a web server that lets you manage relationships in RDF by creating URLs you can perform CRUD (Create Read Update Delete)\noperation on:\n\n\n\n\nhttp://my_url/some_resource\n\n\nhttp://my_url/some_resource/children\n\n\nhttp://my_url/some_resource/children/child_resource\n\n\n prefix:isChildOf \nhttp://my_url/some_resource\n\n\n\n\nAn LDP server also lets you request the RDF graph for a resource with varying levels of additional information for discovery:\n\n\n\n\nThe resource itself\n\n\nThe resource plus child resources\n\n\nThe resource plus all other resources that reference it (inbound references)\n\n\nThe resource plus children plus inbound references\n\n\n\n\nFedora 4 is an LDP implementation. It stores metadata using RDF (Resource Description Framework), a standard format for data interchange on the web. RDF data is formatted as triples, like so: \nresource_uri\n \npredicate_uri\n \nobject_uri\n and can be exported in many different formats:\n\n\n\n\nJSON-LD\n\n\nRDF/XML\n\n\nTurtle\n\n\nN-Triples\n\n\n\n\nWorking with RDF is not entirely new in the Islandora/Fedora context, as RELS-EXT and RELS-INT have always been RDF/XML. Related objects can be included in RDF, so it functions as a graph you can traverse in order to discover more information. \n\n\nExample: Dublin Core as XML and RDF using the dc namespace\n\n\nDublin Core XML you store with the resource.\n\n\n?xml version=\n1.0\n?\n\n\nmetadata\n  xmlns=\nhttp://example.org/myapp/\n\n  xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n  xsi:schemaLocation=\nhttp://example.org/myapp/ http://example.org/myapp/schema.xsd\n\n  xmlns:dc=\nhttp://purl.org/dc/elements/1.1/\n\n  \ndc:title\n\n    Islandora\n  \n/dc:title\n\n  \ndc:description\n\n    Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework.\n  \n/dc:description\n\n\n/metadata\n\n\n\n\n\nvs RDF (which is actually properties of the resource)\n\n\n@prefix dc: \nhttp://purl.org/dc/elements/1.1/\n .\n\nhttp://islandora.ca/\n dc:title \nIslandora\n ;\n   dc:description \nIslandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework.\n .\n\n\n\n\nInteroperability\n\n\nIslandora CLAW works with the \nPortland Common Data Model\n, \"a flexible, extensible domain model that is intended to underlie a wide array of repository and DAMS applications.\" What does this mean in practice? Objects stored in Islandora CLAW will have a data model that can be recognized by Hydra and other custom Fedora 4 based repository heads, and vice versa. By working together with the Hydra and Fedora communities, we can leverage a broader community of developers, librarians, and other digital repository users to build better tools and share resources.", 
            "title": "Intro to claw"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#intro-to-islandora-claw", 
            "text": "Islandora CLAW is the project name for development of Islandora to work with Fedora 4, also known as Islandora 7.x-2.x. To fully understand Islandora CLAW, it is best to start by looking at its contrasts to the previous version of Islandora, known as 7.x-1.x.   Islandora 7.x-1.x works as a bridge between Drupal 7.x and Fedora 3. Put simply, Islandora 7.x-1.x is middleware between Fedora 3 and Drupal 7.x, sometimes expressed as a hamburger:", 
            "title": "Intro to Islandora CLAW"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#islandora-7x-1x-with-fedora-3", 
            "text": "Islandora CLAW (or Islandora 7.x-2.x) does more than simply replace that base layer with Fedora 4. It is a total re-architecting of the interaction between the various pieces. Rather than a hamburger, Islandora CLAW is a chimera:", 
            "title": "Islandora 7.x-1.x (with Fedora 3)"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#islandora-claw-with-fedora-4", 
            "text": "Or, for a diagram that doesn't involve food or animals:    This new structure has several advantages:   Parcelling out the various services and dependencies allows for more horizontal scalability  Changing the relationship between Drupal and Fedora allows for a more flexible approach to front-end management (i.e, it need not be Drupal) while also taking much greater advantage of features available from Drupal (i.e, Fedora objects are treated more like nodes, for the purposes of using Drupal contrib modules. Many Islandora 7.x-1.x modules are redundant in Islandora CLAW because they reproduce existing Drupal contrib modules that can be used out of the box in Islandora CLAW).  Easier to keep up-to-date as not all pieces must be versioned together.  Installations tools (Ansible, Docker, Vagrant) can automate uniting the pieces in a simple, clean installation process. Islandora has always been a turn-key repository solution, in the sense that it needs no customization once installed. With Islandora CLAW, that installation process is much smoother, with automated solutions that can be used in production.", 
            "title": "Islandora CLAW (with Fedora 4)"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#ecosystem", 
            "text": "", 
            "title": "Ecosystem"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#alpaca", 
            "text": "Event driven middleware based on Apache Camel that synchronizes Fedora 4 with Drupal.", 
            "title": "Alpaca"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#chullo", 
            "text": "A PHP client for Fedora 4 built using Guzzle and EasyRdf.", 
            "title": "Chullo"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#claw", 
            "text": "A container with references to all of the other components that make up Islandora CLAW. Also contains documentation and project discussions.", 
            "title": "CLAW"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#crayfish", 
            "text": "Top level container for the various Islandora CLAW microservices.", 
            "title": "Crayfish"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#islandora", 
            "text": "The Drupal modules associated with CLAW. Work is underway to have this as a project on  drupal.org .", 
            "title": "Islandora"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#pdx", 
            "text": "Top level container for the various PCDM specific Islandora CLAW microservices.", 
            "title": "PDX"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#why-switch", 
            "text": "Islandora 7.x-1.x is a tried and tested product with a vibrant user and contributor community and many tools and add-ons available to customize and expand its uses. Islandora CLAW is a major departure, representing a great deal of work both in development of the software, and to migrate and upgrade existing Islandora sites. So why make the change?", 
            "title": "Why Switch?"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#fedora", 
            "text": "The primary motive for moving to Islandora CLAW is to stay current with the repository layer of our ecosystem. Moving to Fedora 4 is vital for the long-term utility of the project.   Fedora 3 is End-of-Life and has not been supported since 2015. This means that there will be no improvements, bug fixes, or security patches released for the software, drastically increasing individual maintenance needs for adopters.   Fedora 3 experiences significant slowdown when repositories reach a large (millions) number of objects. Fedora 4 is much more scalable, and is specifically engineered to be horizontally scalable in ways that Fedora 3 cannot.", 
            "title": "Fedora"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#drupal", 
            "text": "Drupal 8  has been officially released and development has begun on Drupal 9. Official Drupal policy will see Drupal 7 become unsupported when Drupal 9 is released, putting it in the same precarious territory as Fedora 3.   The initial phases of Islandora CLAW development worked with Drupal 7 as a front-end, but Islandora CLAW has been architected with a pivot to Drupal 8 in mind from its very inception. As of June, 2016, Islandora CLAW development has pivoted fully to Drupal 8, ensuring that when the Islandora Community is ready to make the move, there will be a version of Islandora that functions with the latest and best-supported versions of both our front-end and repository layers by pairing Drupal 8 with Fedora 4.", 
            "title": "Drupal"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#community-driven-design", 
            "text": "The Islandora community has grown significantly since the project began, both in terms of users and contributors. For the first time, we are in a position to have a truly community-driven development process, in which any Islandora user can participate at whatever level fits their interests and abilities. Islandora CLAW has worked with the broader Islandora community to solicit use-cases, put forward prospectuses and project plans for review and editing, and has been developed with a mix of funding from Islandora Foundation members and volunteer developers working on sprints.  Islandora CLAW is developed  by  the Islandora community,  for  the Islandora community. As a member of the Islandora community, you can help to steer the direction it takes.", 
            "title": "Community-Driven Design"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#linked-data", 
            "text": "Linked Data is a big concept. A  definition by Tim Bernes-Lee  from 2006 articulates the basic idea in the context of the \"Semantic Web\":      It is about making links, so that a person or machine can explore the web of data. With linked data, when you have some of it, you can find other, related, data.  Like the web of hypertext, the web of data is constructed with documents on the web. However, unlike the web of hypertext, where links are relationships anchors in hypertext documents written in HTML, for data they links between arbitrary things described by RDF. The URIs identify any kind of object or concept. But for HTML or RDF, the same expectations apply to make the web grow:    Use URIs as names for things    Use HTTP URIs so that people can look up those names.    When someone looks up a URI, provide useful information, using the standards (RDF*, SPARQL)    Include links to other URIs. so that they can discover more things.     LDP is an official W3C recommendation. According to  their spec , Linked Data Platform (LDP) defines a set of rules for HTTP operations on web resources, some based on RDF, to provide an architecture for read-write Linked Data on the web. Put more simply: An LDP server is a web server that lets you manage relationships in RDF by creating URLs you can perform CRUD (Create Read Update Delete)\noperation on:   http://my_url/some_resource  http://my_url/some_resource/children  http://my_url/some_resource/children/child_resource   prefix:isChildOf  http://my_url/some_resource   An LDP server also lets you request the RDF graph for a resource with varying levels of additional information for discovery:   The resource itself  The resource plus child resources  The resource plus all other resources that reference it (inbound references)  The resource plus children plus inbound references   Fedora 4 is an LDP implementation. It stores metadata using RDF (Resource Description Framework), a standard format for data interchange on the web. RDF data is formatted as triples, like so:  resource_uri   predicate_uri   object_uri  and can be exported in many different formats:   JSON-LD  RDF/XML  Turtle  N-Triples   Working with RDF is not entirely new in the Islandora/Fedora context, as RELS-EXT and RELS-INT have always been RDF/XML. Related objects can be included in RDF, so it functions as a graph you can traverse in order to discover more information.", 
            "title": "Linked Data"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#example-dublin-core-as-xml-and-rdf-using-the-dc-namespace", 
            "text": "Dublin Core XML you store with the resource.  ?xml version= 1.0 ?  metadata\n  xmlns= http://example.org/myapp/ \n  xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n  xsi:schemaLocation= http://example.org/myapp/ http://example.org/myapp/schema.xsd \n  xmlns:dc= http://purl.org/dc/elements/1.1/ \n   dc:title \n    Islandora\n   /dc:title \n   dc:description \n    Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework.\n   /dc:description  /metadata   vs RDF (which is actually properties of the resource)  @prefix dc:  http://purl.org/dc/elements/1.1/  . http://islandora.ca/  dc:title  Islandora  ;\n   dc:description  Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework.  .", 
            "title": "Example: Dublin Core as XML and RDF using the dc namespace"
        }, 
        {
            "location": "/user-documentation/intro-to-claw/#interoperability", 
            "text": "Islandora CLAW works with the  Portland Common Data Model , \"a flexible, extensible domain model that is intended to underlie a wide array of repository and DAMS applications.\" What does this mean in practice? Objects stored in Islandora CLAW will have a data model that can be recognized by Hydra and other custom Fedora 4 based repository heads, and vice versa. By working together with the Hydra and Fedora communities, we can leverage a broader community of developers, librarians, and other digital repository users to build better tools and share resources.", 
            "title": "Interoperability"
        }
    ]
}